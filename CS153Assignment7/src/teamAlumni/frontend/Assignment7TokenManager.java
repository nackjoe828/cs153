/* Generated By:JJTree&JavaCC: Do not edit this line. Assignment7TokenManager.java */
package teamAlumni.frontend;
import java.util.ArrayList;
import java.io.*;
import wci.intermediate.*;
import wci.intermediate.symtabimpl.*;
import wci.util.*;
import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.symtabimpl.DefinitionImpl.*;
import static wci.intermediate.symtabimpl.RoutineCodeImpl.*;
import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.icodeimpl.ICodeKeyImpl.*;

/** Token Manager. */
public class Assignment7TokenManager implements Assignment7Constants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1ffffff80L) != 0L)
         {
            jjmatchedKind = 55;
            return 1;
         }
         if ((active0 & 0x80000000000L) != 0L)
            return 8;
         if ((active0 & 0x2000000000L) != 0L)
            return 27;
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 66;
            return -1;
         }
         if ((active0 & 0x200000000000L) != 0L)
            return 3;
         return -1;
      case 1:
         if ((active0 & 0x1ffffff00L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 1;
            return 1;
         }
         if ((active0 & 0x40000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x80L) != 0L)
            return 1;
         return -1;
      case 2:
         if ((active0 & 0x1bf7fff00L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 2;
            return 1;
         }
         if ((active0 & 0x40800000L) != 0L)
            return 1;
         return -1;
      case 3:
         if ((active0 & 0x13e795500L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 3;
            return 1;
         }
         if ((active0 & 0x8106aa00L) != 0L)
            return 1;
         return -1;
      case 4:
         if ((active0 & 0x13e585100L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 4;
            return 1;
         }
         if ((active0 & 0x210400L) != 0L)
            return 1;
         return -1;
      case 5:
         if ((active0 & 0x3e484100L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 5;
            return 1;
         }
         if ((active0 & 0x100101000L) != 0L)
            return 1;
         return -1;
      case 6:
         if ((active0 & 0x3e480000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 6;
            return 1;
         }
         if ((active0 & 0x4100L) != 0L)
            return 1;
         return -1;
      case 7:
         if ((active0 & 0x14480000L) != 0L)
            return 1;
         if ((active0 & 0x2a000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 7;
            return 1;
         }
         return -1;
      case 8:
         if ((active0 & 0xa000000L) != 0L)
            return 1;
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 8;
            return 1;
         }
         return -1;
      case 9:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 9;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 2);
      case 10:
         return jjStopAtPos(0, 3);
      case 13:
         return jjStopAtPos(0, 4);
      case 32:
         return jjStopAtPos(0, 1);
      case 33:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L);
      case 34:
         return jjStopAtPos(0, 46);
      case 39:
         return jjStartNfaWithStates_0(0, 45, 3);
      case 40:
         return jjStopAtPos(0, 47);
      case 41:
         return jjStopAtPos(0, 48);
      case 42:
         return jjStopAtPos(0, 33);
      case 43:
         return jjStopAtPos(0, 35);
      case 44:
         return jjStopAtPos(0, 44);
      case 45:
         return jjStopAtPos(0, 34);
      case 46:
         return jjStartNfaWithStates_0(0, 43, 8);
      case 47:
         return jjStartNfaWithStates_0(0, 37, 27);
      case 58:
         return jjStopAtPos(0, 38);
      case 59:
         return jjStopAtPos(0, 39);
      case 60:
         jjmatchedKind = 41;
         return jjMoveStringLiteralDfa1_0(0x8000000000000L);
      case 61:
         jjmatchedKind = 36;
         return jjMoveStringLiteralDfa1_0(0x20000000000000L);
      case 62:
         jjmatchedKind = 42;
         return jjMoveStringLiteralDfa1_0(0x10000000000000L);
      case 63:
         return jjStopAtPos(0, 40);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x20000000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x6000000L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x500L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x422000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x810000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x4080L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x1200L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x100100000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 123:
         return jjStopAtPos(0, 49);
      case 125:
         return jjStopAtPos(0, 50);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 51);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         break;
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000000L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x48000000L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x80012000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1200L);
      case 102:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(1, 7, 1);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x220000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0xc40100L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x8400L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x6080000L);
      case 82:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 30, 1);
         break;
      case 87:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x20200L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x80340000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x1010000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 114:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x2800L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x5000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x6000000L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 100:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 1);
         break;
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 1);
         else if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 1);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      case 108:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 1);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x200100L);
      case 110:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 1);
         break;
      case 114:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 1);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x500000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
      case 69:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x10080000L);
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x6000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 1);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 107:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 1);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      case 68:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
      case 77:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L);
      case 89:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 103:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 1);
         break;
      case 104:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 1);
         break;
      case 110:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 12, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L);
      case 69:
         return jjMoveStringLiteralDfa7_0(active0, 0xc000000L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L);
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L);
      case 110:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 1);
         break;
      case 114:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 14, 1);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 28, 1);
         break;
      case 70:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 26, 1);
         break;
      case 78:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000L);
      case 83:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L);
      case 84:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 19, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000L);
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 22, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000L);
      case 84:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(8, 25, 1);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(8, 27, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 78:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(10, 29, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 38;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 27:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(33, 34);
                  else if (curChar == 47)
                     jjCheckNAddStates(0, 2);
                  break;
               case 0:
                  if ((0xf7ffffffffffffffL & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 8);
                  else if (curChar == 47)
                     jjAddStates(9, 10);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(6);
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if (curChar == 39 && kind > 58)
                     kind = 58;
                  break;
               case 5:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(6);
                  break;
               case 7:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAddStates(11, 13);
                  break;
               case 10:
                  if ((0x280000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(11);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAddStates(14, 17);
                  break;
               case 13:
                  if ((0xf7ffffffffffffffL & l) != 0L && kind > 66)
                     kind = 66;
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 8);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 16);
                  break;
               case 16:
                  if (curChar != 46)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAddStates(18, 20);
                  break;
               case 18:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(19);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAddStates(21, 24);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(21, 7);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 24:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(25);
                  break;
               case 26:
                  if (curChar == 47)
                     jjAddStates(9, 10);
                  break;
               case 28:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 29:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 30:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 31:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 33:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 34:
                  if (curChar == 42)
                     jjAddStates(25, 26);
                  break;
               case 35:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(36, 34);
                  break;
               case 36:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(36, 34);
                  break;
               case 37:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 66)
                     kind = 66;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(1);
                  }
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 9:
                  if ((0x2000000020L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjAddStates(27, 28);
                  break;
               case 13:
                  if (kind > 66)
                     kind = 66;
                  break;
               case 17:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(29, 30);
                  break;
               case 23:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(31, 32);
                  break;
               case 28:
                  jjAddStates(0, 2);
                  break;
               case 33:
                  jjCheckNAddTwoStates(33, 34);
                  break;
               case 35:
               case 36:
                  jjCheckNAddTwoStates(36, 34);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 66)
                     kind = 66;
                  break;
               case 3:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 28:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 2);
                  break;
               case 33:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 35:
               case 36:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(36, 34);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 38 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   28, 29, 31, 15, 16, 21, 7, 22, 23, 27, 32, 9, 10, 12, 9, 10, 
   11, 12, 17, 18, 20, 17, 18, 19, 20, 35, 37, 10, 11, 18, 19, 24, 
   25, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\151\146", 
"\142\157\157\154\145\141\156", "\162\145\141\154", "\142\162\145\141\153", "\145\154\163\145", 
"\162\145\164\165\162\156", "\143\141\163\145", "\151\156\164\145\147\145\162", "\164\162\165\145", 
"\146\141\154\163\145", "\143\150\141\162", "\166\157\151\144", "\103\117\116\123\124\101\116\124", 
"\163\167\151\164\143\150", "\167\150\151\154\145", "\143\157\156\164\151\156\165\145", "\146\157\162", 
"\156\165\154\154", "\106\125\116\103\137\114\111\123\124", "\106\125\116\103\137\104\105\106", 
"\123\124\101\124\105\115\105\116\124", "\116\105\127\137\124\131\120\105", 
"\104\105\103\114\101\122\101\124\111\117\116", "\120\124\122", "\155\141\151\156", "\163\164\162\151\156\147", "\52", "\55", 
"\53", "\75", "\57", "\72", "\73", "\77", "\74", "\76", "\56", "\54", "\47", "\42", 
"\50", "\51", "\173", "\175", "\74\75", "\76\75", "\75\75", "\41\75", null, null, 
null, null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x54ffffffffffff81L, 0x4L, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[38];
private final int[] jjstateSet = new int[76];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public Assignment7TokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public Assignment7TokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 38; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 7 :
        image.append(jjstrLiteralImages[7]);
        lengthOfMatch = jjstrLiteralImages[7].length();
        debugStream.println("IF token: " + matchedToken.image);
         break;
      case 8 :
        image.append(jjstrLiteralImages[8]);
        lengthOfMatch = jjstrLiteralImages[8].length();
        debugStream.println("BOOLEAN token: " + matchedToken.image);
         break;
      case 9 :
        image.append(jjstrLiteralImages[9]);
        lengthOfMatch = jjstrLiteralImages[9].length();
        debugStream.println("REAL token: " + matchedToken.image);
         break;
      case 10 :
        image.append(jjstrLiteralImages[10]);
        lengthOfMatch = jjstrLiteralImages[10].length();
        debugStream.println("BREAK token: " + matchedToken.image);
         break;
      case 11 :
        image.append(jjstrLiteralImages[11]);
        lengthOfMatch = jjstrLiteralImages[11].length();
        debugStream.println("ELSE token: " + matchedToken.image);
         break;
      case 12 :
        image.append(jjstrLiteralImages[12]);
        lengthOfMatch = jjstrLiteralImages[12].length();
        debugStream.println("RETURN token: " + matchedToken.image);
         break;
      case 13 :
        image.append(jjstrLiteralImages[13]);
        lengthOfMatch = jjstrLiteralImages[13].length();
        debugStream.println("CASE token: " + matchedToken.image);
         break;
      case 14 :
        image.append(jjstrLiteralImages[14]);
        lengthOfMatch = jjstrLiteralImages[14].length();
        debugStream.println("INTEGER token: " + matchedToken.image);
         break;
      case 15 :
        image.append(jjstrLiteralImages[15]);
        lengthOfMatch = jjstrLiteralImages[15].length();
        debugStream.println("TRUE token: " + matchedToken.image);
         break;
      case 16 :
        image.append(jjstrLiteralImages[16]);
        lengthOfMatch = jjstrLiteralImages[16].length();
        debugStream.println("FALSE token: " + matchedToken.image);
         break;
      case 17 :
        image.append(jjstrLiteralImages[17]);
        lengthOfMatch = jjstrLiteralImages[17].length();
        debugStream.println("CHAR token: " + matchedToken.image);
         break;
      case 18 :
        image.append(jjstrLiteralImages[18]);
        lengthOfMatch = jjstrLiteralImages[18].length();
        debugStream.println("VOID token: " + matchedToken.image);
         break;
      case 19 :
        image.append(jjstrLiteralImages[19]);
        lengthOfMatch = jjstrLiteralImages[19].length();
        debugStream.println("CONSTANT token: " + matchedToken.image);
         break;
      case 20 :
        image.append(jjstrLiteralImages[20]);
        lengthOfMatch = jjstrLiteralImages[20].length();
        debugStream.println("SWITCH token: " + matchedToken.image);
         break;
      case 21 :
        image.append(jjstrLiteralImages[21]);
        lengthOfMatch = jjstrLiteralImages[21].length();
        debugStream.println("WHILE token: " + matchedToken.image);
         break;
      case 22 :
        image.append(jjstrLiteralImages[22]);
        lengthOfMatch = jjstrLiteralImages[22].length();
        debugStream.println("CONTINUE token: " + matchedToken.image);
         break;
      case 23 :
        image.append(jjstrLiteralImages[23]);
        lengthOfMatch = jjstrLiteralImages[23].length();
        debugStream.println("FOR token: " + matchedToken.image);
         break;
      case 24 :
        image.append(jjstrLiteralImages[24]);
        lengthOfMatch = jjstrLiteralImages[24].length();
        debugStream.println("NULL token: " + matchedToken.image);
         break;
      case 25 :
        image.append(jjstrLiteralImages[25]);
        lengthOfMatch = jjstrLiteralImages[25].length();
        debugStream.println("FUNC_LIST token: " + matchedToken.image);
         break;
      case 26 :
        image.append(jjstrLiteralImages[26]);
        lengthOfMatch = jjstrLiteralImages[26].length();
        debugStream.println("FUNC_DEF token: " + matchedToken.image);
         break;
      case 27 :
        image.append(jjstrLiteralImages[27]);
        lengthOfMatch = jjstrLiteralImages[27].length();
        debugStream.println("STATEMENT token: " + matchedToken.image);
         break;
      case 28 :
        image.append(jjstrLiteralImages[28]);
        lengthOfMatch = jjstrLiteralImages[28].length();
        debugStream.println("NEW_TYPE token: " + matchedToken.image);
         break;
      case 29 :
        image.append(jjstrLiteralImages[29]);
        lengthOfMatch = jjstrLiteralImages[29].length();
        debugStream.println("DECLARATION token: " + matchedToken.image);
         break;
      case 30 :
        image.append(jjstrLiteralImages[30]);
        lengthOfMatch = jjstrLiteralImages[30].length();
        debugStream.println("POINTER token: " + matchedToken.image);
         break;
      case 31 :
        image.append(jjstrLiteralImages[31]);
        lengthOfMatch = jjstrLiteralImages[31].length();
        debugStream.println("MAIN token: " + matchedToken.image);
         break;
      case 32 :
        image.append(jjstrLiteralImages[32]);
        lengthOfMatch = jjstrLiteralImages[32].length();
        debugStream.println("STRING token: " + matchedToken.image);
         break;
      case 33 :
        image.append(jjstrLiteralImages[33]);
        lengthOfMatch = jjstrLiteralImages[33].length();
        debugStream.println("STAR token: " + matchedToken.image);
         break;
      case 34 :
        image.append(jjstrLiteralImages[34]);
        lengthOfMatch = jjstrLiteralImages[34].length();
        debugStream.println("MINUS token: " + matchedToken.image);
         break;
      case 35 :
        image.append(jjstrLiteralImages[35]);
        lengthOfMatch = jjstrLiteralImages[35].length();
        debugStream.println("PLUS token: " + matchedToken.image);
         break;
      case 36 :
        image.append(jjstrLiteralImages[36]);
        lengthOfMatch = jjstrLiteralImages[36].length();
        debugStream.println("ASSIGN token: " + matchedToken.image);
         break;
      case 37 :
        image.append(jjstrLiteralImages[37]);
        lengthOfMatch = jjstrLiteralImages[37].length();
        debugStream.println("SLASH token: " + matchedToken.image);
         break;
      case 38 :
        image.append(jjstrLiteralImages[38]);
        lengthOfMatch = jjstrLiteralImages[38].length();
        debugStream.println("COLON token: " + matchedToken.image);
         break;
      case 39 :
        image.append(jjstrLiteralImages[39]);
        lengthOfMatch = jjstrLiteralImages[39].length();
        debugStream.println("SEMICOLON token: " + matchedToken.image);
         break;
      case 40 :
        image.append(jjstrLiteralImages[40]);
        lengthOfMatch = jjstrLiteralImages[40].length();
        debugStream.println("HOOK token: " + matchedToken.image);
         break;
      case 41 :
        image.append(jjstrLiteralImages[41]);
        lengthOfMatch = jjstrLiteralImages[41].length();
        debugStream.println("LT token: " + matchedToken.image);
         break;
      case 42 :
        image.append(jjstrLiteralImages[42]);
        lengthOfMatch = jjstrLiteralImages[42].length();
        debugStream.println("GT token: " + matchedToken.image);
         break;
      case 43 :
        image.append(jjstrLiteralImages[43]);
        lengthOfMatch = jjstrLiteralImages[43].length();
        debugStream.println("DOT token: " + matchedToken.image);
         break;
      case 44 :
        image.append(jjstrLiteralImages[44]);
        lengthOfMatch = jjstrLiteralImages[44].length();
        debugStream.println("COMMA token: " + matchedToken.image);
         break;
      case 45 :
        image.append(jjstrLiteralImages[45]);
        lengthOfMatch = jjstrLiteralImages[45].length();
        debugStream.println("SINGLEQUOTE token: " + matchedToken.image);
         break;
      case 46 :
        image.append(jjstrLiteralImages[46]);
        lengthOfMatch = jjstrLiteralImages[46].length();
        debugStream.println("QUOTE token: " + matchedToken.image);
         break;
      case 47 :
        image.append(jjstrLiteralImages[47]);
        lengthOfMatch = jjstrLiteralImages[47].length();
        debugStream.println("LPAREN token: " + matchedToken.image);
         break;
      case 48 :
        image.append(jjstrLiteralImages[48]);
        lengthOfMatch = jjstrLiteralImages[48].length();
        debugStream.println("RPAREN token: " + matchedToken.image);
         break;
      case 49 :
        image.append(jjstrLiteralImages[49]);
        lengthOfMatch = jjstrLiteralImages[49].length();
        debugStream.println("LBRACE token: " + matchedToken.image);
         break;
      case 50 :
        image.append(jjstrLiteralImages[50]);
        lengthOfMatch = jjstrLiteralImages[50].length();
        debugStream.println("LBRACE token: " + matchedToken.image);
         break;
      case 51 :
        image.append(jjstrLiteralImages[51]);
        lengthOfMatch = jjstrLiteralImages[51].length();
        debugStream.println("LE token: " + matchedToken.image);
         break;
      case 52 :
        image.append(jjstrLiteralImages[52]);
        lengthOfMatch = jjstrLiteralImages[52].length();
        debugStream.println("GE token: " + matchedToken.image);
         break;
      case 53 :
        image.append(jjstrLiteralImages[53]);
        lengthOfMatch = jjstrLiteralImages[53].length();
        debugStream.println("EQ token: " + matchedToken.image);
         break;
      case 54 :
        image.append(jjstrLiteralImages[54]);
        lengthOfMatch = jjstrLiteralImages[54].length();
        debugStream.println("NE token: " + matchedToken.image);
         break;
      case 55 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        debugStream.println("IDENTIFIER token: " + matchedToken.image);
         break;
      case 58 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        debugStream.println("CHARACTER token: " + matchedToken.image);
         break;
      case 60 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        debugStream.println("INTNUM token: " + matchedToken.image);
         break;
      case 62 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        debugStream.println("REAL token: " + matchedToken.image);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
