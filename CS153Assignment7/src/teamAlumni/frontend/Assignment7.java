/* Generated By:JJTree&JavaCC: Do not edit this line. Assignment7.java */
package teamAlumni.frontend;

import java.util.ArrayList;
import java.io.*;

import wci.intermediate.*;
import wci.intermediate.symtabimpl.*;
import wci.util.*;

import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.symtabimpl.DefinitionImpl.*;
import static wci.intermediate.symtabimpl.RoutineCodeImpl.*;
import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.icodeimpl.ICodeKeyImpl.*;

public class Assignment7/*@bgen(jjtree)*/implements Assignment7TreeConstants, Assignment7Constants {/*@bgen(jjtree)*/
  protected JJTAssignment7State jjtree = new JJTAssignment7State();
  private static SymTabStack symTabStack;
  private static SymTabEntry programId;

  public static void main(String[] args) throws Exception
  {
        // Create and initialize the symbol table stack.
    symTabStack = SymTabFactory.createSymTabStack();
    Predefined.initialize(symTabStack);

    String path = args[0];
    java.io.FileReader fr = new java.io.FileReader(path);
    Assignment7 parser = new Assignment7(fr);

    // Parse the program
    SimpleNode rootNode  = parser.CompilationUnit();

    // Print the cross-reference table.
    CrossReferencer crossReferencer = new CrossReferencer();
    crossReferencer.print(symTabStack);

    // Visit the parse tree nodes to decorate them with type information.
    TypeSetterVisitor typeVisitor = new TypeSetterVisitor();
    rootNode.jjtAccept(typeVisitor, null);

    // Create and initialize the ICode wrapper for the parse tree.
    ICode iCode = ICodeFactory.createICode();
    iCode.setRoot(rootNode);
    programId.setAttribute(ROUTINE_ICODE, iCode);

    // Print the parse tree.
    ParseTreePrinter treePrinter = new ParseTreePrinter(System.out);
    treePrinter.print(symTabStack);
  }

/*****************************************
 * THE LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/
  final public SimpleNode CompilationUnit() throws ParseException {
 /*@bgen(jjtree) CompilationUnit */
  ASTCompilationUnit jjtn000 = new ASTCompilationUnit(JJTCOMPILATIONUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);SimpleNode rootNode;
    try {
      try {
        jj_consume_token(MAIN);
      programId = symTabStack.enterLocal("main");
      programId.setDefinition(DefinitionImpl.PROGRAM);
      programId.setAttribute(ROUTINE_SYMTAB, symTabStack.push());
      symTabStack.setProgramId(programId);
        jj_consume_token(LBRACE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTANT:
          Constant();
          break;
        default:
          jj_la1[0] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW_TYPE:
          NewType();
          break;
        default:
          jj_la1[1] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FUNC_LIST:
          FunctionList();
          break;
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FUNC_DEF:
          FunctionDefinition();
          break;
        default:
          jj_la1[3] = jj_gen;
          ;
        }
        rootNode = DeclAndStat();
        jj_consume_token(RBRACE);
        jj_consume_token(0);
      {if (true) return rootNode;}
      } catch (ParseException ex) {
    System.out.println("================big: " + ex);
    handleError(ex.currentToken);
    {if (true) return null;}
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Constant() throws ParseException {
 /*@bgen(jjtree) Constant */
 ASTConstant jjtn000 = new ASTConstant(JJTCONSTANT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);SimpleNode node;
    try {
      jj_consume_token(CONSTANT);
      jj_consume_token(COLON);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_1;
        }
        jj_consume_token(IDENTIFIER);
    SymTabEntry constantId = symTabStack.lookupLocal(token.image);
    if (constantId == null) {
       constantId = symTabStack.enterLocal(token.image);
       constantId.appendLineNumber(token.beginLine);
       constantId.setDefinition(DefinitionImpl.CONSTANT);
    }
        jj_consume_token(ASSIGN);
        node = ConstantLiteral();
    constantId.setAttribute(CONSTANT_VALUE, node.getAttribute(VALUE));
    constantId.setTypeSpec(node.getTypeSpec());
        jj_consume_token(SEMICOLON);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void NewType() throws ParseException {
 /*@bgen(jjtree) NewType */
  ASTNewType jjtn000 = new ASTNewType(JJTNEWTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NEW_TYPE);
      jj_consume_token(COLON);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_2;
        }
        NewTypeDefinition();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void NewTypeDefinition() throws ParseException {
 /*@bgen(jjtree) NewTypeDefinition */
  ASTNewTypeDefinition jjtn000 = new ASTNewTypeDefinition(JJTNEWTYPEDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      label_3:
      while (true) {
        VariableDeclaration();
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_3;
        }
      }
      jj_consume_token(RBRACE);
      jj_consume_token(COLON);
      jj_consume_token(IDENTIFIER);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FunctionList() throws ParseException {
 /*@bgen(jjtree) FunctionList */
  ASTFunctionList jjtn000 = new ASTFunctionList(JJTFUNCTIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FUNC_LIST);
      jj_consume_token(COLON);
      label_4:
      while (true) {
        FunctionDeclaration();
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_4;
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FunctionDeclaration() throws ParseException {
 /*@bgen(jjtree) FunctionDeclaration */
  ASTFunctionDeclaration jjtn000 = new ASTFunctionDeclaration(JJTFUNCTIONDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
    SymTabEntry funcId = symTabStack.enterLocal(token.image);
    funcId.setDefinition(DefinitionImpl.FUNCTION);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        FuncVariableDeclaration(funcId);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[8] = jj_gen;
            break label_5;
          }
          jj_consume_token(COMMA);
          FuncVariableDeclaration(funcId);
        }
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      jj_consume_token(COLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case REAL:
      case INTEGER:
      case CHAR:
      case IDENTIFIER:
        Type();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;

        break;
      case VOID:
        jj_consume_token(VOID);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FuncVariableDeclaration(SymTabEntry funcId) throws ParseException {
 /*@bgen(jjtree) FuncVariableDeclaration */
 ASTFuncVariableDeclaration jjtn000 = new ASTFuncVariableDeclaration(JJTFUNCVARIABLEDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);VariableDecl varDecl = new VariableDecl();
    try {
      jj_consume_token(IDENTIFIER);
    varDecl.setName(token.image);
      jj_consume_token(COLON);
      Type();
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
    //varDecl.setType();
    funcId.setAttribute(SymTabKeyImpl.ROUTINE_PARMS, varDecl);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Type() throws ParseException {
 /*@bgen(jjtree) Type */
  ASTType jjtn000 = new ASTType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHAR:
        jj_consume_token(CHAR);
        break;
      case INTEGER:
        jj_consume_token(INTEGER);
        break;
      case REAL:
        jj_consume_token(REAL);
        break;
      case BOOLEAN:
        jj_consume_token(BOOLEAN);
        break;
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FunctionDefinition() throws ParseException {
 /*@bgen(jjtree) FunctionDefinition */
  ASTFunctionDefinition jjtn000 = new ASTFunctionDefinition(JJTFUNCTIONDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FUNC_DEF);
      jj_consume_token(COLON);
      label_6:
      while (true) {
        Function();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_6;
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Function() throws ParseException {
 /*@bgen(jjtree) Function */
  ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
      jj_consume_token(LBRACE);
      DeclAndStat();
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public SimpleNode DeclAndStat() throws ParseException {
 /*@bgen(jjtree) DeclAndStat */
 ASTDeclAndStat jjtn000 = new ASTDeclAndStat(JJTDECLANDSTAT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);SimpleNode rootNode;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECLARATION:
        jj_consume_token(DECLARATION);
        jj_consume_token(COLON);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[13] = jj_gen;
            break label_7;
          }
          VariableDeclaration();
          jj_consume_token(SEMICOLON);
        }
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      jj_consume_token(STATEMENT);
      jj_consume_token(COLON);
      rootNode = BlockStatement();
                                               jjtree.closeNodeScope(jjtn000, true);
                                               jjtc000 = false;
    {if (true) return rootNode;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void VariableDeclaration() throws ParseException {
 /*@bgen(jjtree) VariableDeclaration */
  ASTVariableDeclaration jjtn000 = new ASTVariableDeclaration(JJTVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
    SymTabEntry variableId = symTabStack.enterLocal(token.image);
    variableId.setDefinition(DefinitionImpl.VARIABLE);
    variableId.appendLineNumber(token.beginLine);
      jj_consume_token(COLON);
      Type();
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
    SymTabEntry typeId = symTabStack.lookup(token.image);
    typeId.appendLineNumber(token.beginLine);
    TypeSpec type = typeId.getTypeSpec();
    variableId.setTypeSpec(type);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//use embedded definite node descriptors
  final public void Expression() throws ParseException {
    AdditiveExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
    case GT:
    case LE:
    case GE:
    case EQ:
    case NE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        jj_consume_token(LT);
          ASTlessThan jjtn001 = new ASTlessThan(JJTLESSTHAN);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          AdditiveExpression();
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
        break;
      case LE:
        jj_consume_token(LE);
           ASTlessEqual jjtn002 = new ASTlessEqual(JJTLESSEQUAL);
           boolean jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
        try {
          AdditiveExpression();
        } catch (Throwable jjte002) {
           if (jjtc002) {
             jjtree.clearNodeScope(jjtn002);
             jjtc002 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte002 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte002;}
           }
           if (jjte002 instanceof ParseException) {
             {if (true) throw (ParseException)jjte002;}
           }
           {if (true) throw (Error)jjte002;}
        } finally {
           if (jjtc002) {
             jjtree.closeNodeScope(jjtn002,  2);
           }
        }
        break;
      case GT:
        jj_consume_token(GT);
          ASTgreaterThan jjtn003 = new ASTgreaterThan(JJTGREATERTHAN);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        try {
          AdditiveExpression();
        } catch (Throwable jjte003) {
          if (jjtc003) {
            jjtree.clearNodeScope(jjtn003);
            jjtc003 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte003 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte003;}
          }
          if (jjte003 instanceof ParseException) {
            {if (true) throw (ParseException)jjte003;}
          }
          {if (true) throw (Error)jjte003;}
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003,  2);
          }
        }
        break;
      case GE:
        jj_consume_token(GE);
           ASTgreaterEqual jjtn004 = new ASTgreaterEqual(JJTGREATEREQUAL);
           boolean jjtc004 = true;
           jjtree.openNodeScope(jjtn004);
        try {
          AdditiveExpression();
        } catch (Throwable jjte004) {
           if (jjtc004) {
             jjtree.clearNodeScope(jjtn004);
             jjtc004 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte004 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte004;}
           }
           if (jjte004 instanceof ParseException) {
             {if (true) throw (ParseException)jjte004;}
           }
           {if (true) throw (Error)jjte004;}
        } finally {
           if (jjtc004) {
             jjtree.closeNodeScope(jjtn004,  2);
           }
        }
        break;
      case EQ:
        jj_consume_token(EQ);
           ASTequal jjtn005 = new ASTequal(JJTEQUAL);
           boolean jjtc005 = true;
           jjtree.openNodeScope(jjtn005);
        try {
          AdditiveExpression();
        } catch (Throwable jjte005) {
           if (jjtc005) {
             jjtree.clearNodeScope(jjtn005);
             jjtc005 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte005 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte005;}
           }
           if (jjte005 instanceof ParseException) {
             {if (true) throw (ParseException)jjte005;}
           }
           {if (true) throw (Error)jjte005;}
        } finally {
           if (jjtc005) {
             jjtree.closeNodeScope(jjtn005,  2);
           }
        }
        break;
      case NE:
        jj_consume_token(NE);
           ASTnotEqual jjtn006 = new ASTnotEqual(JJTNOTEQUAL);
           boolean jjtc006 = true;
           jjtree.openNodeScope(jjtn006);
        try {
          AdditiveExpression();
        } catch (Throwable jjte006) {
           if (jjtc006) {
             jjtree.clearNodeScope(jjtn006);
             jjtc006 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte006 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte006;}
           }
           if (jjte006 instanceof ParseException) {
             {if (true) throw (ParseException)jjte006;}
           }
           {if (true) throw (Error)jjte006;}
        } finally {
           if (jjtc006) {
             jjtree.closeNodeScope(jjtn006,  2);
           }
        }
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
  }

  final public void AdditiveExpression() throws ParseException {
    MultiplicativeExpression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case PLUS:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
          ASTplus jjtn001 = new ASTplus(JJTPLUS);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          MultiplicativeExpression();
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
        break;
      case MINUS:
        jj_consume_token(MINUS);
          ASTminus jjtn002 = new ASTminus(JJTMINUS);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        try {
          MultiplicativeExpression();
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
          }
        }
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
    UnaryExpression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
          ASTmultiply jjtn001 = new ASTmultiply(JJTMULTIPLY);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          UnaryExpression();
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
        break;
      case SLASH:
        jj_consume_token(SLASH);
            ASTdivide jjtn002 = new ASTdivide(JJTDIVIDE);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
        try {
          UnaryExpression();
        } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte002;}
            }
            if (jjte002 instanceof ParseException) {
              {if (true) throw (ParseException)jjte002;}
            }
            {if (true) throw (Error)jjte002;}
        } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002,  2);
            }
        }
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void UnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
        ASTpositive jjtn001 = new ASTpositive(JJTPOSITIVE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      try {
        UnaryExpression();
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte001;}
        }
        if (jjte001 instanceof ParseException) {
          {if (true) throw (ParseException)jjte001;}
        }
        {if (true) throw (Error)jjte001;}
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  2);
        }
      }
      break;
    case MINUS:
      jj_consume_token(MINUS);
          ASTnegative jjtn002 = new ASTnegative(JJTNEGATIVE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
      try {
        UnaryExpression();
      } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
      } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
          }
      }
      break;
    case TRUE:
    case FALSE:
    case CHARACTER:
    case INTNUM:
    case REALNUM:
      Literal();
      break;
    case IDENTIFIER:
      Name();
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public SimpleNode ConstantLiteral() throws ParseException {
 /*@bgen(jjtree) ConstantLiteral */
  ASTConstantLiteral jjtn000 = new ASTConstantLiteral(JJTCONSTANTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTNUM:
        jj_consume_token(INTNUM);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
    jjtn000.setTypeSpec(Predefined.integerType);
    jjtn000.setAttribute(VALUE, Integer.parseInt(token.image));
    {if (true) return jjtn000;}
        break;
      case REALNUM:
        jj_consume_token(REALNUM);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
    jjtn000.setTypeSpec(Predefined.realType);
    jjtn000.setAttribute(VALUE, Float.parseFloat(token.image));
    {if (true) return jjtn000;}
        break;
      case CHARACTER:
        jj_consume_token(CHARACTER);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
    jjtn000.setTypeSpec(Predefined.charType);
    jjtn000.setAttribute(VALUE, token.image);
    {if (true) return jjtn000;}
        break;
      case TRUE:
      case FALSE:
        BooleanLiteral();
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
    jjtn000.setTypeSpec(Predefined.booleanType);
    jjtn000.setAttribute(VALUE, Boolean.parseBoolean(token.image));
    {if (true) return jjtn000;}
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Literal() throws ParseException {
 /*@bgen(jjtree) Literal */
  ASTLiteral jjtn000 = new ASTLiteral(JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTNUM:
        jj_consume_token(INTNUM);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
    jjtn000.setTypeSpec(Predefined.integerType);
    jjtn000.setAttribute(VALUE, Integer.parseInt(token.image));
        break;
      case REALNUM:
        jj_consume_token(REALNUM);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
    jjtn000.setTypeSpec(Predefined.realType);
    jjtn000.setAttribute(VALUE, Float.parseFloat(token.image));
        break;
      case CHARACTER:
        jj_consume_token(CHARACTER);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
    jjtn000.setTypeSpec(Predefined.charType);
    jjtn000.setAttribute(VALUE, token.image);
        break;
      case TRUE:
      case FALSE:
        BooleanLiteral();
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
    jjtn000.setTypeSpec(Predefined.booleanType);
    jjtn000.setAttribute(VALUE, Boolean.parseBoolean(token.image));
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BooleanLiteral() throws ParseException {
 /*@bgen(jjtree) BooleanLiteral */
  ASTBooleanLiteral jjtn000 = new ASTBooleanLiteral(JJTBOOLEANLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        jj_consume_token(TRUE);
        break;
      case FALSE:
        jj_consume_token(FALSE);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public SimpleNode Name() throws ParseException {
 /*@bgen(jjtree) Name */
  ASTName jjtn000 = new ASTName(JJTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    System.out.println("Operand: " + token.image);
    SymTabEntry variableId = symTabStack.lookup(token.image);
    if (variableId == null)
    {
      handleError(token);
      {if (true) return null;}
    }
    else
    {
      variableId.appendLineNumber(token.beginLine);
      TypeSpec type = variableId.getTypeSpec();
      jjtn000.setTypeSpec(type);
      jjtn000.setAttribute(ID, variableId);
      {if (true) return jjtn000;}
    }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Statement() throws ParseException {
 SimpleNode stmtNode;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      Block();
      break;
    case IDENTIFIER:
      stmtNode = AssignmentStatement();
    if (stmtNode == null)
    {
                jjtree.popNode();
    }
      break;
    case IF:
    case WHILE:
      ControlStatement();
      break;
    case RETURN:
      ReturnStatement();
      break;
    case ERROR:
      Error();
        handleError(token);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Block() throws ParseException {
    jj_consume_token(LBRACE);
    BlockStatement();
    jj_consume_token(RBRACE);
  }

  final public SimpleNode BlockStatement() throws ParseException {
 /*@bgen(jjtree) BlockStatement */
  ASTBlockStatement jjtn000 = new ASTBlockStatement(JJTBLOCKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case RETURN:
        case WHILE:
        case LBRACE:
        case IDENTIFIER:
        case ERROR:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_10;
        }
        Statement();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public SimpleNode AssignmentStatement() throws ParseException {
 /*@bgen(jjtree) AssignmentStatement */
 ASTAssignmentStatement jjtn000 = new ASTAssignmentStatement(JJTASSIGNMENTSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);SimpleNode nameNode;
    try {
      nameNode = Name();
        if (nameNode == null)
        {
          {if (true) return null;}
        }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        break;
      case ERROR:
        Error();
                   handleError(token);
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Expression();
      jj_consume_token(SEMICOLON);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void ControlStatement() throws ParseException {
 /*@bgen(jjtree) ControlStatement */
  ASTControlStatement jjtn000 = new ASTControlStatement(JJTCONTROLSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        IfStatement();
        break;
      case WHILE:
        WhileStatement();
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void IfStatement() throws ParseException {
 /*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      Statement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        Statement();
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void WhileStatement() throws ParseException {
 /*@bgen(jjtree) WhileStatement */
  ASTWhileStatement jjtn000 = new ASTWhileStatement(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      Statement();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ReturnStatement() throws ParseException {
 /*@bgen(jjtree) ReturnStatement */
  ASTReturnStatement jjtn000 = new ASTReturnStatement(JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case MINUS:
      case PLUS:
      case LPAREN:
      case IDENTIFIER:
      case CHARACTER:
      case INTNUM:
      case REALNUM:
        Expression();
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Error() throws ParseException {
                /*@bgen(jjtree) Error */
  ASTError jjtn000 = new ASTError(JJTERROR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ERROR);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  String handleError(Token token) throws ParseException {
  System.out.println("*** ERROR: Line " + token.beginLine +
                     " after \u005c"" + token.image + "\u005c"" + " ***");

  Token t;

  do {
    t = getNextToken();
  } while (t.kind != SEMICOLON);

  Node removedNode = jjtree.popNode();
  System.out.println("handleError: poped node is " + removedNode);
  System.out.println("handleError: after popNode, the head node is " + jjtree.peekNode());
  return t.image;
  }

  /** Generated Token Manager. */
  public Assignment7TokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[31];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80000,0x10000000,0x2000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x64300,0x24300,0x0,0x0,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x18000,0x18000,0x18000,0x18000,0x201080,0x201080,0x0,0x200080,0x800,0x18000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x800000,0x20000,0x800000,0x800000,0x1000,0x800000,0x800000,0x800000,0x800000,0x800000,0x0,0x780600,0x780600,0xc,0xc,0x22,0x22,0x5480800c,0x54000000,0x54000000,0x0,0x820000,0x820000,0x10,0x0,0x0,0x5480800c,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x4,0x4,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Assignment7(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Assignment7(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Assignment7TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Assignment7(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Assignment7TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Assignment7(Assignment7TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(Assignment7TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[67];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 31; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 67; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
