/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. assignment7.jj */
/*@egen*/options {
  BUILD_PARSER=true;
  IGNORE_CASE=false;
                                                  
                                                            
  DEBUG_TOKEN_MANAGER=false;
  STATIC=false;
             
                   
}

PARSER_BEGIN(Assignment7)
package teamAlumni.frontend;

import java.util.ArrayList;
import java.io.*;

import wci.intermediate.*;
import wci.intermediate.symtabimpl.*;
import wci.util.*;

import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.symtabimpl.DefinitionImpl.*;
import static wci.intermediate.symtabimpl.RoutineCodeImpl.*;
import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.icodeimpl.ICodeKeyImpl.*;

public class Assignment7/*@bgen(jjtree)*/implements Assignment7TreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTAssignment7State jjtree = new JJTAssignment7State();

/*@egen*/

  private static SymTabStack symTabStack;
  private static SymTabEntry programId;
  
  public static void main(String[] args) throws Exception
  {
	// Create and initialize the symbol table stack.
    symTabStack = SymTabFactory.createSymTabStack();
    Predefined.initialize(symTabStack);
    
    String path = args[0];
    java.io.FileReader fr = new java.io.FileReader(path);
    Assignment7 parser = new Assignment7(fr);

    // Parse the program
    SimpleNode rootNode  = parser.CompilationUnit();

    // Print the cross-reference table.
    CrossReferencer crossReferencer = new CrossReferencer();
    crossReferencer.print(symTabStack);

    // Visit the parse tree nodes to decorate them with type information.
    TypeSetterVisitor typeVisitor = new TypeSetterVisitor();    rootNode.jjtAccept(typeVisitor, null);

    // Create and initialize the ICode wrapper for the parse tree.
    ICode iCode = ICodeFactory.createICode();
    iCode.setRoot(rootNode);
    programId.setAttribute(ROUTINE_ICODE, iCode);
    
    // Print the parse tree.
    ParseTreePrinter treePrinter = new ParseTreePrinter(System.out);
    treePrinter.print(symTabStack);    
  } 
}    
PARSER_END(Assignment7)

SKIP : {
   " "
   | "\t"
   | "\n"
   | "\r"
   | <"//" (~["\n", "\r"])*("\n" | "\r" | "\r\n")>
   | <"/*"(~["*"])*"*"(~["/"](~["*"])*"*")*"/" >
 }

/* RESERVED WORDS */
TOKEN : {
    <IF : "if">
      { debugStream.println("IF token: " + matchedToken.image); }
  | <BOOLEAN : "boolean">
      { debugStream.println("BOOLEAN token: " + matchedToken.image); }  
  | <REAL : "real">
      { debugStream.println("REAL token: " + matchedToken.image); }
  | <BREAK : "break">
      { debugStream.println("BREAK token: " + matchedToken.image); }  
  | <ELSE : "else">
      { debugStream.println("ELSE token: " + matchedToken.image); }  
  | <RETURN : "return">
      { debugStream.println("RETURN token: " + matchedToken.image); }  
  | <CASE : "case">
      { debugStream.println("CASE token: " + matchedToken.image); }
  | <INTEGER : "integer">
      { debugStream.println("INTEGER token: " + matchedToken.image); }   
  | <TRUE : "true">
      { debugStream.println("TRUE token: " + matchedToken.image); }  
  | <FALSE : "false">
      { debugStream.println("FALSE token: " + matchedToken.image); }
  | <CHAR : "char">
      { debugStream.println("CHAR token: " + matchedToken.image); }
  | <VOID : "void">
      { debugStream.println("VOID token: " + matchedToken.image); }   
  | <CONSTANT : "CONSTANT">
      { debugStream.println("CONSTANT token: " + matchedToken.image); }  
  | <SWITCH : "switch">
      { debugStream.println("SWITCH token: " + matchedToken.image); }  
  | <WHILE : "while">
      { debugStream.println("WHILE token: " + matchedToken.image); }
  | <CONTINUE : "continue">
      { debugStream.println("CONTINUE token: " + matchedToken.image); }  
  | <FOR : "for">
      { debugStream.println("FOR token: " + matchedToken.image); }  
  | <NULL : "null">
      { debugStream.println("NULL token: " + matchedToken.image); }
  | <FUNC_LIST : "FUNC_LIST">
      { debugStream.println("FUNC_LIST token: " + matchedToken.image); }      
  | <FUNC_DEF : "FUNC_DEF">
      { debugStream.println("FUNC_DEF token: " + matchedToken.image); }
  | <STATEMENT : "STATEMENT">
      { debugStream.println("STATEMENT token: " + matchedToken.image); }
  | <NEW_TYPE : "NEW_TYPE">
      { debugStream.println("NEW_TYPE token: " + matchedToken.image); }
  | <DECLARATION : "DECLARATION">
      { debugStream.println("DECLARATION token: " + matchedToken.image); }
  | <POINTER : "PTR">
      { debugStream.println("POINTER token: " + matchedToken.image); }
  | <MAIN : "main">
      { debugStream.println("MAIN token: " + matchedToken.image); }
  | <STRING : "string">
      { debugStream.println("STRING token: " + matchedToken.image); }                                          
}


/* special symbol tokens */
TOKEN : {
    <STAR : "*">
      { debugStream.println("STAR token: " + matchedToken.image); }  
  | <MINUS : "-">
      { debugStream.println("MINUS token: " + matchedToken.image); }
  | <PLUS : "+">
      { debugStream.println("PLUS token: " + matchedToken.image); }  
  | <ASSIGN : "=">
      { debugStream.println("ASSIGN token: " + matchedToken.image); }  
  | <SLASH : "/">
      { debugStream.println("SLASH token: " + matchedToken.image); }
  | <COLON : ":">
      { debugStream.println("COLON token: " + matchedToken.image); } 
  | <SEMICOLON : ";">
      { debugStream.println("SEMICOLON token: " + matchedToken.image); } 
  | <HOOK : "?">
      { debugStream.println("HOOK token: " + matchedToken.image); }
  | <LT : "<">
      { debugStream.println("LT token: " + matchedToken.image); }  
  | <GT : ">">
      { debugStream.println("GT token: " + matchedToken.image); }  
  | <DOT : ".">
      { debugStream.println("DOT token: " + matchedToken.image); } 
  | <COMMA : ",">
      { debugStream.println("COMMA token: " + matchedToken.image); }
  | <SINGLEQUOTE : "'">
      { debugStream.println("SINGLEQUOTE token: " + matchedToken.image); }  
  | <QUOTE : "\"">
      { debugStream.println("QUOTE token: " + matchedToken.image); }  
  | <LPAREN : "(">
      { debugStream.println("LPAREN token: " + matchedToken.image); } 
  | <RPAREN : ")">
      { debugStream.println("RPAREN token: " + matchedToken.image); } 
  | <LBRACE: "{">
      { debugStream.println("LBRACE token: " + matchedToken.image); }
  | <RBRACE: "}">
      { debugStream.println("LBRACE token: " + matchedToken.image); }    
  | <LE : "<=">
      { debugStream.println("LE token: " + matchedToken.image); }  
  | <GE : ">=">
      { debugStream.println("GE token: " + matchedToken.image); }  
  | <EQ : "==">
      { debugStream.println("EQ token: " + matchedToken.image); }  
  | <NE : "!=">
      { debugStream.println("NE token: " + matchedToken.image); } 
}

  
/* IDENTIFIER tokens */
TOKEN : {
	<IDENTIFIER : (<LETTER> | "_") (<LETTER> | <DIGIT> | "_")*>
      { debugStream.println("IDENTIFIER token: " + matchedToken.image); }
  | <#DIGIT  : ["0"-"9"]>
  | <#LETTER : ["A"-"Z"] | ["a"-"z"]>
  
}

/* CHARACTER tokens */
TOKEN :
{
  <CHARACTER : <SINGLEQUOTE>(<LETTER>|<SYMBAL>|<DIGIT>)<SINGLEQUOTE>>
      { debugStream.println("CHARACTER token: " + matchedToken.image); }
    | <#SYMBAL  : ~ ["A"-"Z","a"-"z","0"-"9"]>
}


/* INTEGER number tokens */
TOKEN :
{
    <INTNUM : <DIGITWITHOUTZERO>(<DIGIT>)*>
      { debugStream.println("INTNUM token: " + matchedToken.image); }
  | <#DIGITWITHOUTZERO : ["1"-"9"] >
}

/* REAL number tokens */
TOKEN : {
    <REALNUM : (<DIGIT>)+<DOT>(<FRACTION>)*((<EXPSIGN>)?(<OPTSIGN>)?(<DIGIT>)+)?
    		  |(<DIGIT>)*<DOT>(<FRACTION>)+(<EXPSIGN>)?(<OPTSIGN>)?(<DIGIT>)*
    		  |(<DIGIT>)+(<EXPSIGN>)(<OPTSIGN>)?(<DIGIT>)+>
      { debugStream.println("REAL token: " + matchedToken.image); }
   | <#FRACTION : ["0"-"9"]>
   | <#EXPSIGN : ["e","E"]>
   | <#OPTSIGN : ["+","-"]>
}

TOKEN : {
  <ERROR : ~[";"]>
}

/*****************************************
 * THE LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/
SimpleNode CompilationUnit():{/*@bgen(jjtree) CompilationUnit */
  ASTCompilationUnit jjtn000 = new ASTCompilationUnit(JJTCOMPILATIONUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  SimpleNode rootNode;}{/*@bgen(jjtree) CompilationUnit */
  try {
/*@egen*/  try  {
    "main"    {      programId = symTabStack.enterLocal("main");      programId.setDefinition(DefinitionImpl.PROGRAM);      programId.setAttribute(ROUTINE_SYMTAB, symTabStack.push());      symTabStack.setProgramId(programId);    }
    "{"    [ Constant() ]
    [ NewType() ]
    [ FunctionList() ]
    [ FunctionDefinition() ]
    rootNode = DeclAndStat() 
    "}"
    < EOF >    {      return rootNode;    }  }  catch (ParseException ex)  {
    System.out.println("================big: " + ex);    handleError(ex.currentToken);    return null;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void Constant():
{/*@bgen(jjtree) Constant */
 ASTConstant jjtn000 = new ASTConstant(JJTCONSTANT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/SimpleNode node;}
{/*@bgen(jjtree) Constant */
  try {
/*@egen*/
  "CONSTANT" ":"
  (<IDENTIFIER>
  {    SymTabEntry constantId = symTabStack.lookupLocal(token.image);    if (constantId == null) {       constantId = symTabStack.enterLocal(token.image);       constantId.appendLineNumber(token.beginLine);       constantId.setDefinition(DefinitionImpl.CONSTANT);    }  }
  "="
  node = ConstantLiteral()  {    constantId.setAttribute(CONSTANT_VALUE, node.getAttribute(VALUE));        constantId.setTypeSpec(node.getTypeSpec());  }
  ";")*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void NewType():
{/*@bgen(jjtree) NewType */
  ASTNewType jjtn000 = new ASTNewType(JJTNEWTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NewType */
  try {
/*@egen*/
  "NEW_TYPE" ":"
  (NewTypeDefinition())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void NewTypeDefinition():
{/*@bgen(jjtree) NewTypeDefinition */
  ASTNewTypeDefinition jjtn000 = new ASTNewTypeDefinition(JJTNEWTYPEDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NewTypeDefinition */
  try {
/*@egen*/
  "{" (VariableDeclaration() ";")+ "}" ":" <IDENTIFIER>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FunctionList():
{/*@bgen(jjtree) FunctionList */
  ASTFunctionList jjtn000 = new ASTFunctionList(JJTFUNCTIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionList */
  try {
/*@egen*/
  "FUNC_LIST" ":"  
  (FunctionDeclaration() ";")+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FunctionDeclaration():
{/*@bgen(jjtree) FunctionDeclaration */
  ASTFunctionDeclaration jjtn000 = new ASTFunctionDeclaration(JJTFUNCTIONDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionDeclaration */
  try {
/*@egen*/
  <IDENTIFIER>{
    SymTabEntry funcId = symTabStack.enterLocal(token.image);
    funcId.setDefinition(DefinitionImpl.FUNCTION);  }
  "(" [ FuncVariableDeclaration(funcId) ("," FuncVariableDeclaration(funcId))* ] ")"
  ":" (Type()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {
    //funcId.setTypeSpec();  }|"void")/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FuncVariableDeclaration(SymTabEntry funcId):
{/*@bgen(jjtree) FuncVariableDeclaration */
 ASTFuncVariableDeclaration jjtn000 = new ASTFuncVariableDeclaration(JJTFUNCVARIABLEDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/VariableDecl varDecl = new VariableDecl();}
{/*@bgen(jjtree) FuncVariableDeclaration */
  try {
/*@egen*/
  <IDENTIFIER>{
    varDecl.setName(token.image);
  }
  ":" Type()/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/{
    //varDecl.setType();
    funcId.setAttribute(SymTabKeyImpl.ROUTINE_PARMS, varDecl);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Type():
{/*@bgen(jjtree) Type */
  ASTType jjtn000 = new ASTType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Type */
  try {
/*@egen*/
  <CHAR> | <INTEGER> | <REAL> | <BOOLEAN> | <IDENTIFIER>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FunctionDefinition():
{/*@bgen(jjtree) FunctionDefinition */
  ASTFunctionDefinition jjtn000 = new ASTFunctionDefinition(JJTFUNCTIONDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionDefinition */
  try {
/*@egen*/
  "FUNC_DEF" ":"
  (Function())+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Function():
{/*@bgen(jjtree) Function */
  ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Function */
  try {
/*@egen*/
  <IDENTIFIER>
  "{"
  DeclAndStat()
  "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

SimpleNode DeclAndStat():
{/*@bgen(jjtree) DeclAndStat */
 ASTDeclAndStat jjtn000 = new ASTDeclAndStat(JJTDECLANDSTAT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/SimpleNode rootNode;}
{/*@bgen(jjtree) DeclAndStat */
  try {
/*@egen*/
  ["DECLARATION" ":" (VariableDeclaration() ";")*]
  "STATEMENT" ":" rootNode = BlockStatement()/*@bgen(jjtree)*/
                                             {
                                               jjtree.closeNodeScope(jjtn000, true);
                                               jjtc000 = false;
                                             }
/*@egen*/{
    return rootNode;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void VariableDeclaration():
{/*@bgen(jjtree) VariableDeclaration */
  ASTVariableDeclaration jjtn000 = new ASTVariableDeclaration(JJTVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VariableDeclaration */
  try {
/*@egen*/
  <IDENTIFIER>{    SymTabEntry variableId = symTabStack.enterLocal(token.image);
    variableId.setDefinition(DefinitionImpl.VARIABLE);
    variableId.appendLineNumber(token.beginLine);
  }
  ":" Type()/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/{
    SymTabEntry typeId = symTabStack.lookup(token.image);    typeId.appendLineNumber(token.beginLine);    TypeSpec type = typeId.getTypeSpec();
    variableId.setTypeSpec(type);  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//use embedded definite node descriptors
void Expression()       :
{}
{
  AdditiveExpression()
  [ "<"/*@bgen(jjtree) #lessThan( 2) */
        {
          ASTlessThan jjtn001 = new ASTlessThan(JJTLESSTHAN);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
/*@egen*/             
  | "<="/*@bgen(jjtree) #lessEqual( 2) */
         {
           ASTlessEqual jjtn002 = new ASTlessEqual(JJTLESSEQUAL);
           boolean jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
         }
         try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
         } catch (Throwable jjte002) {
           if (jjtc002) {
             jjtree.clearNodeScope(jjtn002);
             jjtc002 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte002 instanceof RuntimeException) {
             throw (RuntimeException)jjte002;
           }
           if (jjte002 instanceof ParseException) {
             throw (ParseException)jjte002;
           }
           throw (Error)jjte002;
         } finally {
           if (jjtc002) {
             jjtree.closeNodeScope(jjtn002,  2);
           }
         }
/*@egen*/              
  | ">"/*@bgen(jjtree) #greaterThan( 2) */
        {
          ASTgreaterThan jjtn003 = new ASTgreaterThan(JJTGREATERTHAN);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        }
        try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte003) {
          if (jjtc003) {
            jjtree.clearNodeScope(jjtn003);
            jjtc003 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte003 instanceof RuntimeException) {
            throw (RuntimeException)jjte003;
          }
          if (jjte003 instanceof ParseException) {
            throw (ParseException)jjte003;
          }
          throw (Error)jjte003;
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003,  2);
          }
        }
/*@egen*/                
  | ">="/*@bgen(jjtree) #greaterEqual( 2) */
         {
           ASTgreaterEqual jjtn004 = new ASTgreaterEqual(JJTGREATEREQUAL);
           boolean jjtc004 = true;
           jjtree.openNodeScope(jjtn004);
         }
         try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
         } catch (Throwable jjte004) {
           if (jjtc004) {
             jjtree.clearNodeScope(jjtn004);
             jjtc004 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte004 instanceof RuntimeException) {
             throw (RuntimeException)jjte004;
           }
           if (jjte004 instanceof ParseException) {
             throw (ParseException)jjte004;
           }
           throw (Error)jjte004;
         } finally {
           if (jjtc004) {
             jjtree.closeNodeScope(jjtn004,  2);
           }
         }
/*@egen*/                 
  | "=="/*@bgen(jjtree) #equal( 2) */
         {
           ASTequal jjtn005 = new ASTequal(JJTEQUAL);
           boolean jjtc005 = true;
           jjtree.openNodeScope(jjtn005);
         }
         try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
         } catch (Throwable jjte005) {
           if (jjtc005) {
             jjtree.clearNodeScope(jjtn005);
             jjtc005 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte005 instanceof RuntimeException) {
             throw (RuntimeException)jjte005;
           }
           if (jjte005 instanceof ParseException) {
             throw (ParseException)jjte005;
           }
           throw (Error)jjte005;
         } finally {
           if (jjtc005) {
             jjtree.closeNodeScope(jjtn005,  2);
           }
         }
/*@egen*/          
  | "!="/*@bgen(jjtree) #notEqual( 2) */
         {
           ASTnotEqual jjtn006 = new ASTnotEqual(JJTNOTEQUAL);
           boolean jjtc006 = true;
           jjtree.openNodeScope(jjtn006);
         }
         try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
         } catch (Throwable jjte006) {
           if (jjtc006) {
             jjtree.clearNodeScope(jjtn006);
             jjtc006 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte006 instanceof RuntimeException) {
             throw (RuntimeException)jjte006;
           }
           if (jjte006 instanceof ParseException) {
             throw (ParseException)jjte006;
           }
           throw (Error)jjte006;
         } finally {
           if (jjtc006) {
             jjtree.closeNodeScope(jjtn006,  2);
           }
         }
/*@egen*/              ]
}

void AdditiveExpression()       : 
{}
{
  MultiplicativeExpression()
  ( "+"/*@bgen(jjtree) #plus( 2) */
        {
          ASTplus jjtn001 = new ASTplus(JJTPLUS);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/ MultiplicativeExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
/*@egen*/         
  | "-"/*@bgen(jjtree) #minus( 2) */
        {
          ASTminus jjtn002 = new ASTminus(JJTMINUS);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/ MultiplicativeExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            throw (RuntimeException)jjte002;
          }
          if (jjte002 instanceof ParseException) {
            throw (ParseException)jjte002;
          }
          throw (Error)jjte002;
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
          }
        }
/*@egen*/           )*
}

void MultiplicativeExpression()       :{}{
  UnaryExpression()  ( "*"/*@bgen(jjtree) #multiply( 2) */
        {
          ASTmultiply jjtn001 = new ASTmultiply(JJTMULTIPLY);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
/*@egen*/                 | "/"/*@bgen(jjtree) #divide( 2) */
          {
            ASTdivide jjtn002 = new ASTdivide(JJTDIVIDE);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
          } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              throw (RuntimeException)jjte002;
            }
            if (jjte002 instanceof ParseException) {
              throw (ParseException)jjte002;
            }
            throw (Error)jjte002;
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002,  2);
            }
          }
/*@egen*/            )*}

void UnaryExpression()       :
{}
{
  "+"/*@bgen(jjtree) #positive( 2) */
      {
        ASTpositive jjtn001 = new ASTpositive(JJTPOSITIVE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          throw (RuntimeException)jjte001;
        }
        if (jjte001 instanceof ParseException) {
          throw (ParseException)jjte001;
        }
        throw (Error)jjte001;
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  2);
        }
      }
/*@egen*/             
  | "-"/*@bgen(jjtree) #negative( 2) */
        {
          ASTnegative jjtn002 = new ASTnegative(JJTNEGATIVE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            throw (RuntimeException)jjte002;
          }
          if (jjte002 instanceof ParseException) {
            throw (ParseException)jjte002;
          }
          throw (Error)jjte002;
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
          }
        }
/*@egen*/             
  | Literal()
  | Name()
  | "(" Expression() ")"
}

SimpleNode ConstantLiteral():
{/*@bgen(jjtree) ConstantLiteral */
  ASTConstantLiteral jjtn000 = new ASTConstantLiteral(JJTCONSTANTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ConstantLiteral */
  try {
/*@egen*/
  < INTNUM >/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/{
    jjtn000.setTypeSpec(Predefined.integerType);
    jjtn000.setAttribute(VALUE, Integer.parseInt(token.image));
    return jjtn000;
  }
  | < REALNUM >/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/{
    jjtn000.setTypeSpec(Predefined.realType);
    jjtn000.setAttribute(VALUE, Float.parseFloat(token.image));
    return jjtn000;
  }
  | < CHARACTER >/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/{
    jjtn000.setTypeSpec(Predefined.charType);
    jjtn000.setAttribute(VALUE, token.image);
    return jjtn000;
  }
  | BooleanLiteral()/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/{
    jjtn000.setTypeSpec(Predefined.booleanType);
    jjtn000.setAttribute(VALUE, Boolean.parseBoolean(token.image));
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Literal():
{/*@bgen(jjtree) Literal */
  ASTLiteral jjtn000 = new ASTLiteral(JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Literal */
  try {
/*@egen*/
  < INTNUM >/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/{    jjtn000.setTypeSpec(Predefined.integerType);    jjtn000.setAttribute(VALUE, Integer.parseInt(token.image));  }  | < REALNUM >/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/{    jjtn000.setTypeSpec(Predefined.realType);    jjtn000.setAttribute(VALUE, Float.parseFloat(token.image));  }  | < CHARACTER >/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/{    jjtn000.setTypeSpec(Predefined.charType);    jjtn000.setAttribute(VALUE, token.image);  }
  | BooleanLiteral()/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/{    jjtn000.setTypeSpec(Predefined.booleanType);
    jjtn000.setAttribute(VALUE, Boolean.parseBoolean(token.image));
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void BooleanLiteral() :
{/*@bgen(jjtree) BooleanLiteral */
  ASTBooleanLiteral jjtn000 = new ASTBooleanLiteral(JJTBOOLEANLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BooleanLiteral */
  try {
/*@egen*/
  "true" | "false"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

SimpleNode Name() :{/*@bgen(jjtree) Name */
  ASTName jjtn000 = new ASTName(JJTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Name */
  try {
/*@egen*/  < IDENTIFIER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  //  ("." <IDENTIFIER>)*
  {    System.out.println("Operand: " + token.image);    SymTabEntry variableId = symTabStack.lookup(token.image);    if (variableId == null)    {      handleError(token);
      return null;    }    else    {      variableId.appendLineNumber(token.beginLine);      TypeSpec type = variableId.getTypeSpec();      jjtn000.setTypeSpec(type);      jjtn000.setAttribute(ID, variableId);
      return jjtn000;    }  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void Statement()       :
{SimpleNode stmtNode;}
{
  Block()
  | stmtNode=AssignmentStatement()  {
    if (stmtNode == null)    {		jjtree.popNode();
    }  }
  | ControlStatement()
  | ReturnStatement()
  | Error()  {	handleError(token);
  }
}

void Block()       :
{}
{
  "{" BlockStatement() "}"
}

SimpleNode BlockStatement():
{/*@bgen(jjtree) BlockStatement */
  ASTBlockStatement jjtn000 = new ASTBlockStatement(JJTBLOCKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BlockStatement */
  try {
/*@egen*/
  ( Statement() )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

SimpleNode AssignmentStatement():
{/*@bgen(jjtree) AssignmentStatement */
 ASTAssignmentStatement jjtn000 = new ASTAssignmentStatement(JJTASSIGNMENTSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/SimpleNode nameNode;}
{/*@bgen(jjtree) AssignmentStatement */
  try {
/*@egen*/
  nameNode=Name()
  {	if (nameNode == null)	{	  return null;
	}
  }
  ("=" | Error() { handleError(token); })
  Expression()
  ";"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ControlStatement():
{/*@bgen(jjtree) ControlStatement */
  ASTControlStatement jjtn000 = new ASTControlStatement(JJTCONTROLSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ControlStatement */
  try {
/*@egen*/
  IfStatement() | WhileStatement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void IfStatement():
{/*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfStatement */
  try {
/*@egen*/
  "if" "(" Expression() ")" Statement() [ LOOKAHEAD(1) "else" Statement() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void WhileStatement():
{/*@bgen(jjtree) WhileStatement */
  ASTWhileStatement jjtn000 = new ASTWhileStatement(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhileStatement */
  try {
/*@egen*/
  "while" "(" Expression() ")" Statement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ReturnStatement():
{/*@bgen(jjtree) ReturnStatement */
  ASTReturnStatement jjtn000 = new ASTReturnStatement(JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ReturnStatement */
  try {
/*@egen*/
  "return" [ Expression() ] ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  
}

void Error() : {/*@bgen(jjtree) Error */
  ASTError jjtn000 = new ASTError(JJTERROR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Error */
  try {
/*@egen*/
  <ERROR>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

JAVACODE
String handleError(Token token)      
{
  System.out.println("*** ERROR: Line " + token.beginLine +
                     " after \"" + token.image + "\"" + " ***");
  
  Token t;
  
  do {
    t = getNextToken();
  } while (t.kind != SEMICOLON);

  Node removedNode = jjtree.popNode();
  System.out.println("handleError: poped node is " + removedNode);
  System.out.println("handleError: after popNode, the head node is " + jjtree.peekNode());
  return t.image;
}