/* Generated By:JJTree&JavaCC: Do not edit this line. AlminParser.java */
package wci.frontend;

import java.util.ArrayList;
import java.io.*;

import wci.intermediate.*;
import wci.intermediate.symtabimpl.*;
import wci.backend.*;
import wci.util.*;

import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.symtabimpl.DefinitionImpl.*;
import static wci.intermediate.symtabimpl.RoutineCodeImpl.*;
import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.icodeimpl.ICodeKeyImpl.*;

import java.io.*;

public class AlminParser/*@bgen(jjtree)*/implements AlminParserTreeConstants, AlminParserConstants {/*@bgen(jjtree)*/
  protected static JJTAlminParserState jjtree = new JJTAlminParserState();private static final String SOURCE_SUFFIX = ".al";
  private static final String OUTPUT_SUFFIX = ".j";

  private static SymTabStack symTabStack;
  private static SymTabEntry programId;

  private static int errorCount = 0;

  public static void main(String[] args)
  {
    // Create and initialize the symbol table stack.
    symTabStack = SymTabFactory.createSymTabStack();
    Predefined.initialize(symTabStack);

    // Check if the input format is valid 
    if (args.length != 1 || !args[0].endsWith(SOURCE_SUFFIX)) {
      System.out.println("Usage: > Almin inputfile.al");
      return;
    }

    String filePath = args[0];

    // Create parser from source
    FileReader fr = null;
    try {
      fr = new java.io.FileReader(filePath);
    } catch (FileNotFoundException e) {
      System.out.println("Error: \u005c"" + filePath + "\u005c" does not exist");
      return;
    }

    // Get the file name without the ".al" suffix 
    String name = filePath.substring(0, filePath.lastIndexOf(SOURCE_SUFFIX));
    // Get the file name without Path and suffix (i.e. path/to/filename.al ===> filename)
        String programName = name.substring(name.lastIndexOf("/")+1);

    AlminParser parser = new AlminParser(fr);
    SimpleNode rootNode = null;

    try {
      rootNode = parser.Program(programName);
    }
    catch (ParseException ex) {
      ex.printStackTrace();
    }

    // Print the cross-reference table.
    CrossReferencer crossReferencer = new CrossReferencer();
    crossReferencer.print(symTabStack);
        if (rootNode != null)
        {
    // Visit the parse tree nodes to decorate them with type information.
    TypeSetterVisitor typeVisitor = new TypeSetterVisitor();
    rootNode.jjtAccept(typeVisitor, null);

        // Create and initialize the ICode wrapper for the parse tree.
        ICode iCode = ICodeFactory.createICode();
        iCode.setRoot(rootNode);
        programId.setAttribute(ROUTINE_ICODE, iCode);
    // Print the parse tree.
    ParseTreePrinter treePrinter = new ParseTreePrinter(System.out);
    treePrinter.print(symTabStack);

        // Create the compiler backend and generate code.
    try
    {
                Backend backend = BackendFactory.createBackend("compile");
                backend.process(iCode, symTabStack, name + OUTPUT_SUFFIX);
         }catch(Exception ex) {
           ex.printStackTrace();
         }
        }
  }

/*****************************************
 * ALMIN GRAMMAR STARTS HERE             *
 *****************************************/
  static final public SimpleNode Program(String programName) throws ParseException {
  // Set program name; Enter global scope (push on symTabStack)
  SimpleNode rootNode;
  programId = symTabStack.enterLocal(programName);
  programId.setDefinition(DefinitionImpl.PROGRAM);
  symTabStack.setProgramId(programId);
  programId.setAttribute(ROUTINE_SYMTAB, symTabStack.push());
  programId.setAttribute(ROUTINE_ROUTINES, new ArrayList<SymTabEntry>());
    try {
      rootNode = FunctionDefinitions();
      jj_consume_token(0);
    } catch (ParseException e) {
     if (e.getMessage() != null)
        System.out.println("** Compilation Error:" + " " + e.getMessage());
     {if (true) return null;}
    }
    symTabStack.pop();
    {if (true) return rootNode;}
    throw new Error("Missing return statement in function");
  }

  static final public SimpleNode FunctionDefinitions() throws ParseException {
  SimpleNode rootNode;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      FuncDefn();
    }
    rootNode = ProgramMain();
    {if (true) return rootNode;}
    throw new Error("Missing return statement in function");
  }

  static final public SimpleNode ProgramMain() throws ParseException {
  SimpleNode rootNode;
    jj_consume_token(MAIN);
    SymTabEntry mainID = symTabStack.enterLocal("main");
    mainID.setDefinition(DefinitionImpl.PROCEDURE);
        mainID.appendLineNumber(token.beginLine);
    mainID.setAttribute(ROUTINE_SYMTAB, symTabStack.push());
    rootNode = Block();
    ICode iCode = ICodeFactory.createICode();
    iCode.setRoot(rootNode);
    mainID.setAttribute(ROUTINE_ICODE, iCode);
    symTabStack.pop();
    {if (true) return rootNode;}
    throw new Error("Missing return statement in function");
  }

  static final public void FuncDefn() throws ParseException {
  TypeSpec type;
  SymTabEntry funcID;
  ArrayList<SymTabEntry> paramList;
  SimpleNode bodyNode;
    jj_consume_token(IDENTIFIER);
                 type = javaCodeGetAndProcessTypeID(token);
    jj_consume_token(IDENTIFIER);
                 funcID = javaCodeProcessFuncDefn(token, type);
    jj_consume_token(LPAREN);
    funcID.setAttribute(ROUTINE_SYMTAB, symTabStack.push());
    ArrayList<SymTabEntry> routineIds =
        (ArrayList<SymTabEntry>) programId.getAttribute(ROUTINE_ROUTINES);
    routineIds.add(funcID);
    paramList = new ArrayList<SymTabEntry>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
                       type = javaCodeGetAndProcessTypeID(token);
      jj_consume_token(IDENTIFIER);
                       paramList.add(javaCodeProcessVariableDeclaration(token, type));
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        jj_consume_token(IDENTIFIER);
                           type = javaCodeGetAndProcessTypeID(token);
        jj_consume_token(IDENTIFIER);
                           paramList.add(javaCodeProcessVariableDeclaration(token, type));
      }
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    funcID.setAttribute(ROUTINE_PARMS, paramList);
    bodyNode = Block();
    ICode iCode = ICodeFactory.createICode();
    iCode.setRoot(bodyNode);
    funcID.setAttribute(ROUTINE_ICODE, iCode);
    symTabStack.pop();
  }

  static final public SimpleNode Block() throws ParseException {
 /*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);SimpleNode rootNode;
    try {
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECLARATION:
        jj_consume_token(DECLARATION);
        jj_consume_token(COLON);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_3;
          }
          VariableDeclaration();
        }
        jj_consume_token(STATEMENT);
        jj_consume_token(COLON);
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      Statements();
      jj_consume_token(RBRACE);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000 ;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public SimpleNode ScopedBlock() throws ParseException {
  SimpleNode rootNode;
  symTabStack.push();
    rootNode = Block();
    symTabStack.pop();
    {if (true) return rootNode;}
    throw new Error("Missing return statement in function");
  }

  static final public void VariableDeclaration() throws ParseException {
  TypeSpec type;
    try {
      jj_consume_token(IDENTIFIER);
                       type = javaCodeGetAndProcessTypeID(token);
      jj_consume_token(IDENTIFIER);
                       javaCodeProcessVariableDeclaration(token, type);
      jj_consume_token(SEMICOLON);
    } catch (ParseException e) {
     //javaCodeSkipLine();
     if (e.getMessage() != null)
        System.out.println("** Compilation Error:" + " " + e.getMessage());
    }
  }

  static final public void Statements() throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case RETURN:
      case SEMICOLON:
      case LBRACE:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      Statement();
    }
  }

  static final public void Statement() throws ParseException {
    try {
      if (jj_2_1(2)) {
        Assignment();
        jj_consume_token(SEMICOLON);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          FunctionCall();
          jj_consume_token(SEMICOLON);
          break;
        case LBRACE:
          ScopedBlock();
          break;
        case IF:
        case WHILE:
          ControlStatement();
          break;
        case RETURN:
          ReturnStatement();
          break;
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
     javaCodeSkipLine();
     if (e.getMessage() != null)
        System.out.println("** Compilation Error:" + " " + e.getMessage());
    }
  }

  static final public void Assignment() throws ParseException {
                               /*@bgen(jjtree) ASSIGN */
  ASTASSIGN jjtn000 = new ASTASSIGN(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Variable();
      jj_consume_token(ASSIGN);
      Expression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ControlStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      IfStatement();
      break;
    case WHILE:
      WhileLoop();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void IfStatement() throws ParseException {
                      /*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      Statement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        Statement();
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void WhileLoop() throws ParseException {
                           /*@bgen(jjtree) LOOP */
  ASTLOOP jjtn000 = new ASTLOOP(JJTLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      BooleanExpression();
      jj_consume_token(RPAREN);
      Statement();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
void ForLoop() # void : {ICodeNode node; int count = 2;}{
  <FOR> "("
  [Expression() ("," Expression())*]";"
  BooleanExpression() ";"
  [Expression() {count++;} ("," Expression())* {count++;}]
  ")"
  Statement() #LOOP  //{ jjtThis.addChild(node); }}
*/
  static final public void FunctionCall() throws ParseException {
                       /*@bgen(jjtree) FunctionCall */
  ASTFunctionCall jjtn000 = new ASTFunctionCall(JJTFUNCTIONCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        jj_consume_token(IDENTIFIER);
        SymTabEntry funcID = symTabStack.lookup(token.image);
        if (funcID == null) {
                        System.out.println("** Compilation Error: Function of name: \u005c"" + token.image
                                   + "\u005c" has not been defined at line " + token.beginLine
                                   + " column " + token.beginColumn);
                        {if (true) throw new ParseException();}
                 }
                funcID.appendLineNumber(token.beginLine);
        TypeSpec type = funcID.getTypeSpec();
        jjtn000.setTypeSpec(type);
        jjtn000.setAttribute(ID, funcID);
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MINUS:
        case LPAREN:
        case NOT:
        case IDENTIFIER:
        case CHAR:
        case STRING:
        case BOOL:
        case INT:
        case REAL:
          Expression();
          label_5:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[9] = jj_gen;
              break label_5;
            }
            jj_consume_token(COMMA);
            Expression();
          }
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
      } catch (ParseException e) {
    javaCodeSkipLine();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ReturnStatement() throws ParseException {
                          /*@bgen(jjtree) ReturnStatement */
  ASTReturnStatement jjtn000 = new ASTReturnStatement(JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case LPAREN:
      case NOT:
      case IDENTIFIER:
      case CHAR:
      case STRING:
      case BOOL:
      case INT:
      case REAL:
        Expression();
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      StringLiteral();
      break;
    default:
      jj_la1[12] = jj_gen;
      if (jj_2_2(2)) {
        Assignment();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MINUS:
        case LPAREN:
        case NOT:
        case IDENTIFIER:
        case CHAR:
        case BOOL:
        case INT:
        case REAL:
          BooleanExpression();
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void BooleanExpression() throws ParseException {
    SimpleExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
    case GT:
    case LE:
    case GE:
    case EQ:
    case NE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        jj_consume_token(LT);
                                 ASTLT jjtn001 = new ASTLT(JJTLT);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
        try {
          SimpleExpression();
        } catch (Throwable jjte001) {
                                 if (jjtc001) {
                                   jjtree.clearNodeScope(jjtn001);
                                   jjtc001 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte001 instanceof RuntimeException) {
                                   {if (true) throw (RuntimeException)jjte001;}
                                 }
                                 if (jjte001 instanceof ParseException) {
                                   {if (true) throw (ParseException)jjte001;}
                                 }
                                 {if (true) throw (Error)jjte001;}
        } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  2);
                                 }
        }
        break;
      case LE:
        jj_consume_token(LE);
                                 ASTLE jjtn002 = new ASTLE(JJTLE);
                                 boolean jjtc002 = true;
                                 jjtree.openNodeScope(jjtn002);
        try {
          SimpleExpression();
        } catch (Throwable jjte002) {
                                 if (jjtc002) {
                                   jjtree.clearNodeScope(jjtn002);
                                   jjtc002 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte002 instanceof RuntimeException) {
                                   {if (true) throw (RuntimeException)jjte002;}
                                 }
                                 if (jjte002 instanceof ParseException) {
                                   {if (true) throw (ParseException)jjte002;}
                                 }
                                 {if (true) throw (Error)jjte002;}
        } finally {
                                 if (jjtc002) {
                                   jjtree.closeNodeScope(jjtn002,  2);
                                 }
        }
        break;
      case GT:
        jj_consume_token(GT);
                                 ASTGT jjtn003 = new ASTGT(JJTGT);
                                 boolean jjtc003 = true;
                                 jjtree.openNodeScope(jjtn003);
        try {
          SimpleExpression();
        } catch (Throwable jjte003) {
                                 if (jjtc003) {
                                   jjtree.clearNodeScope(jjtn003);
                                   jjtc003 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte003 instanceof RuntimeException) {
                                   {if (true) throw (RuntimeException)jjte003;}
                                 }
                                 if (jjte003 instanceof ParseException) {
                                   {if (true) throw (ParseException)jjte003;}
                                 }
                                 {if (true) throw (Error)jjte003;}
        } finally {
                                 if (jjtc003) {
                                   jjtree.closeNodeScope(jjtn003,  2);
                                 }
        }
        break;
      case GE:
        jj_consume_token(GE);
                                 ASTGE jjtn004 = new ASTGE(JJTGE);
                                 boolean jjtc004 = true;
                                 jjtree.openNodeScope(jjtn004);
        try {
          SimpleExpression();
        } catch (Throwable jjte004) {
                                 if (jjtc004) {
                                   jjtree.clearNodeScope(jjtn004);
                                   jjtc004 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte004 instanceof RuntimeException) {
                                   {if (true) throw (RuntimeException)jjte004;}
                                 }
                                 if (jjte004 instanceof ParseException) {
                                   {if (true) throw (ParseException)jjte004;}
                                 }
                                 {if (true) throw (Error)jjte004;}
        } finally {
                                 if (jjtc004) {
                                   jjtree.closeNodeScope(jjtn004,  2);
                                 }
        }
        break;
      case EQ:
        jj_consume_token(EQ);
                                 ASTEQ jjtn005 = new ASTEQ(JJTEQ);
                                 boolean jjtc005 = true;
                                 jjtree.openNodeScope(jjtn005);
        try {
          SimpleExpression();
        } catch (Throwable jjte005) {
                                 if (jjtc005) {
                                   jjtree.clearNodeScope(jjtn005);
                                   jjtc005 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte005 instanceof RuntimeException) {
                                   {if (true) throw (RuntimeException)jjte005;}
                                 }
                                 if (jjte005 instanceof ParseException) {
                                   {if (true) throw (ParseException)jjte005;}
                                 }
                                 {if (true) throw (Error)jjte005;}
        } finally {
                                 if (jjtc005) {
                                   jjtree.closeNodeScope(jjtn005,  2);
                                 }
        }
        break;
      case NE:
        jj_consume_token(NE);
                                 ASTNE jjtn006 = new ASTNE(JJTNE);
                                 boolean jjtc006 = true;
                                 jjtree.openNodeScope(jjtn006);
        try {
          SimpleExpression();
        } catch (Throwable jjte006) {
                                 if (jjtc006) {
                                   jjtree.clearNodeScope(jjtn006);
                                   jjtc006 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte006 instanceof RuntimeException) {
                                   {if (true) throw (RuntimeException)jjte006;}
                                 }
                                 if (jjte006 instanceof ParseException) {
                                   {if (true) throw (ParseException)jjte006;}
                                 }
                                 {if (true) throw (Error)jjte006;}
        } finally {
                                 if (jjtc006) {
                                   jjtree.closeNodeScope(jjtn006,  2);
                                 }
        }
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
  }

  static final public void SimpleExpression() throws ParseException {
    Term();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case PLUS:
      case OR:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
                  ASTadd jjtn001 = new ASTadd(JJTADD);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
        try {
          Term();
        } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
        } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
        }
        break;
      case MINUS:
        jj_consume_token(MINUS);
                  ASTsub jjtn002 = new ASTsub(JJTSUB);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
        try {
          Term();
        } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte002;}
                  }
                  if (jjte002 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte002;}
                  }
                  {if (true) throw (Error)jjte002;}
        } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  2);
                  }
        }
        break;
      case OR:
        jj_consume_token(OR);
                  ASTor jjtn003 = new ASTor(JJTOR);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
        try {
          Term();
        } catch (Throwable jjte003) {
                  if (jjtc003) {
                    jjtree.clearNodeScope(jjtn003);
                    jjtc003 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte003 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte003;}
                  }
                  if (jjte003 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte003;}
                  }
                  {if (true) throw (Error)jjte003;}
        } finally {
                  if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003,  2);
                  }
        }
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void Term() throws ParseException {
    Factor();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case AND:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
                     ASTmult jjtn001 = new ASTmult(JJTMULT);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
        try {
          Factor();
        } catch (Throwable jjte001) {
                     if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte001;}
                     }
                     if (jjte001 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte001;}
                     }
                     {if (true) throw (Error)jjte001;}
        } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  2);
                     }
        }
        break;
      case SLASH:
        jj_consume_token(SLASH);
                     ASTdiv jjtn002 = new ASTdiv(JJTDIV);
                     boolean jjtc002 = true;
                     jjtree.openNodeScope(jjtn002);
        try {
          Factor();
        } catch (Throwable jjte002) {
                     if (jjtc002) {
                       jjtree.clearNodeScope(jjtn002);
                       jjtc002 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte002 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte002;}
                     }
                     if (jjte002 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte002;}
                     }
                     {if (true) throw (Error)jjte002;}
        } finally {
                     if (jjtc002) {
                       jjtree.closeNodeScope(jjtn002,  2);
                     }
        }
        break;
      case AND:
        jj_consume_token(AND);
                     ASTand jjtn003 = new ASTand(JJTAND);
                     boolean jjtc003 = true;
                     jjtree.openNodeScope(jjtn003);
        try {
          Factor();
        } catch (Throwable jjte003) {
                     if (jjtc003) {
                       jjtree.clearNodeScope(jjtn003);
                       jjtc003 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte003 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte003;}
                     }
                     if (jjte003 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte003;}
                     }
                     {if (true) throw (Error)jjte003;}
        } finally {
                     if (jjtc003) {
                       jjtree.closeNodeScope(jjtn003,  2);
                     }
        }
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void Factor() throws ParseException {
    if (jj_2_3(2)) {
      FunctionCall();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        Variable();
        break;
      case CHAR:
      case BOOL:
      case INT:
      case REAL:
        Literal();
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        break;
      case NOT:
        jj_consume_token(NOT);
        Factor();
        break;
      case MINUS:
        jj_consume_token(MINUS);
        Factor();
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void StringLiteral() throws ParseException {
                        /*@bgen(jjtree) StringLiteral */
  ASTStringLiteral jjtn000 = new ASTStringLiteral(JJTSTRINGLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STRING);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
        jjtn000.setTypeSpec(Predefined.stringType);
        jjtn000.setAttribute(VALUE, token.image.substring(1, token.image.length()-1));
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Literal() throws ParseException {
                  /*@bgen(jjtree) Literal */
  ASTLiteral jjtn000 = new ASTLiteral(JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        jj_consume_token(INT);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        jjtn000.setTypeSpec(Predefined.integerType);
        jjtn000.setAttribute(VALUE, Integer.parseInt(token.image));
        break;
      case REAL:
        jj_consume_token(REAL);
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
        jjtn000.setTypeSpec(Predefined.realType);
        jjtn000.setAttribute(VALUE, Float.parseFloat(token.image));
        break;
      case CHAR:
        jj_consume_token(CHAR);
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
        jjtn000.setTypeSpec(Predefined.charType);
        jjtn000.setAttribute(VALUE, token.image.charAt(1));
        break;
      case BOOL:
        jj_consume_token(BOOL);
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
        jjtn000.setTypeSpec(Predefined.booleanType);
        jjtn000.setAttribute(VALUE, Boolean.valueOf(token.image));
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Variable() throws ParseException {
                   /*@bgen(jjtree) Variable */
  ASTVariable jjtn000 = new ASTVariable(JJTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                SymTabEntry variableId = symTabStack.lookup(token.image);
        if (variableId == null) {
                        System.out.println("** Compilation Error: Variable of name: \u005c"" + token.image
                                    + "\u005c" has not been decleared at line " + token.beginLine
                                    + " column " + token.beginColumn);
                    {if (true) throw new ParseException();}
        }
                variableId.appendLineNumber(token.beginLine);
        TypeSpec type = variableId.getTypeSpec();
        jjtn000.setTypeSpec(type);
        jjtn000.setAttribute(ID, variableId);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static TypeSpec javaCodeGetAndProcessTypeID(Token t) throws ParseException {
    SymTabEntry typeID = symTabStack.lookup(t.image);
    if (typeID == null || typeID.getDefinition() != DefinitionImpl.TYPE)
    {
      System.out.println("** Compilation Error: Type of name: \u005c"" + t.image
                                    + "\u005c" does not exist at line " + t.beginLine
                                    + " column " + t.beginColumn);
          throw new ParseException();
    }
    typeID.appendLineNumber(t.beginLine);
    return typeID.getTypeSpec();
  }

  static SymTabEntry javaCodeProcessFuncDefn(Token t, TypeSpec type) throws ParseException {
        if (symTabStack.getLocalSymTab().lookup(t.image) != null) {
          System.out.println("** Compilation Error: Function of name: \u005c"" + t.image
                                    + "\u005c" has already been decleared at line " + t.beginLine
                                    + " column " + t.beginColumn);
          throw new ParseException();
        }
    SymTabEntry funcID = symTabStack.enterLocal(t.image);
    funcID.setDefinition(DefinitionImpl.TYPE);
    funcID.appendLineNumber(t.beginLine);
    funcID.setTypeSpec(type); // set return type
    return funcID;
  }

  static SymTabEntry javaCodeProcessVariableDeclaration(Token t, TypeSpec type) throws ParseException {
        if (symTabStack.getLocalSymTab().lookup(t.image) != null) {
          System.out.println("** Compilation Error: Variable of name: \u005c"" + t.image
                                    + "\u005c" has already been decleared at line " + t.beginLine
                                    + " column " + t.beginColumn);
                throw new ParseException();
        }
        if (symTabStack.lookup(t.image) != null
             && symTabStack.lookup(t.image).getDefinition() == DefinitionImpl.TYPE) {
          System.out.println("** Compilation Error: : Expected identifier at \u005c"" + t.image
                                    + "\u005c" line " + t.beginLine
                                    + " column " + t.beginColumn);
                throw new ParseException();
        }

    SymTabEntry varID = symTabStack.enterLocal(t.image);
    varID.setDefinition(DefinitionImpl.VARIABLE);
    varID.appendLineNumber(t.beginLine);
    varID.setTypeSpec(type); // set return type
    return varID;
  }

  static String javaCodeSkipLine() throws ParseException {
  Token t = getNextToken();
  while (t.kind != SEMICOLON) t = getNextToken();
  return t.image;
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_3_1() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_3R_10()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AlminParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x4000000,0x0,0x0,0x200,0x80205400,0x80205400,0x1400,0x800,0x4000000,0x20010000,0x20010000,0x0,0x20010000,0x1800000,0x1800000,0x30000,0x30000,0x88000,0x88000,0x20010000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x100,0x0,0x100,0x100,0x0,0x100,0x100,0x0,0x0,0x0,0xf980,0xf980,0x1000,0xe980,0x1e,0x1e,0x40,0x40,0x20,0x20,0xe980,0xe800,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[3];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public AlminParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AlminParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AlminParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public AlminParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AlminParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public AlminParser(AlminParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(AlminParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[53];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 22; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 53; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
