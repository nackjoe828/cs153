/* Generated By:JJTree&JavaCC: Do not edit this line. AlminParserConstants.java */
package wci.frontend;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface AlminParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SPACE = 1;
  /** RegularExpression Id. */
  int EOL = 2;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 3;
  /** RegularExpression Id. */
  int GENERAL_COMMENT = 4;
  /** RegularExpression Id. */
  int MAIN = 7;
  /** RegularExpression Id. */
  int STATEMENT = 8;
  /** RegularExpression Id. */
  int DECLARATION = 9;
  /** RegularExpression Id. */
  int IF = 10;
  /** RegularExpression Id. */
  int ELSE = 11;
  /** RegularExpression Id. */
  int WHILE = 12;
  /** RegularExpression Id. */
  int FOR = 13;
  /** RegularExpression Id. */
  int RETURN = 14;
  /** RegularExpression Id. */
  int STAR = 15;
  /** RegularExpression Id. */
  int MINUS = 16;
  /** RegularExpression Id. */
  int PLUS = 17;
  /** RegularExpression Id. */
  int ASSIGN = 18;
  /** RegularExpression Id. */
  int SLASH = 19;
  /** RegularExpression Id. */
  int COLON = 20;
  /** RegularExpression Id. */
  int SEMICOLON = 21;
  /** RegularExpression Id. */
  int HOOK = 22;
  /** RegularExpression Id. */
  int LT = 23;
  /** RegularExpression Id. */
  int GT = 24;
  /** RegularExpression Id. */
  int DOT = 25;
  /** RegularExpression Id. */
  int COMMA = 26;
  /** RegularExpression Id. */
  int SINGLEQUOTE = 27;
  /** RegularExpression Id. */
  int DOUBLEQUOTE = 28;
  /** RegularExpression Id. */
  int LPAREN = 29;
  /** RegularExpression Id. */
  int RPAREN = 30;
  /** RegularExpression Id. */
  int LBRACE = 31;
  /** RegularExpression Id. */
  int RBRACE = 32;
  /** RegularExpression Id. */
  int LE = 33;
  /** RegularExpression Id. */
  int GE = 34;
  /** RegularExpression Id. */
  int EQ = 35;
  /** RegularExpression Id. */
  int NE = 36;
  /** RegularExpression Id. */
  int AND = 37;
  /** RegularExpression Id. */
  int OR = 38;
  /** RegularExpression Id. */
  int NOT = 39;
  /** RegularExpression Id. */
  int IDENTIFIER = 40;
  /** RegularExpression Id. */
  int DIGIT = 41;
  /** RegularExpression Id. */
  int LETTER = 42;
  /** RegularExpression Id. */
  int CHAR = 43;
  /** RegularExpression Id. */
  int STRING = 44;
  /** RegularExpression Id. */
  int BOOL = 45;
  /** RegularExpression Id. */
  int INT = 46;
  /** RegularExpression Id. */
  int REAL = 47;
  /** RegularExpression Id. */
  int SIGN = 48;
  /** RegularExpression Id. */
  int UNSIGNED = 49;
  /** RegularExpression Id. */
  int WHOLE = 50;
  /** RegularExpression Id. */
  int FRACTION = 51;
  /** RegularExpression Id. */
  int EXPONENT = 52;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int COMMENT_STATE = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<SPACE>",
    "<EOL>",
    "<SINGLE_LINE_COMMENT>",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 6>",
    "\"main\"",
    "\"STATEMENT\"",
    "\"DECLARATION\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"for\"",
    "\"return\"",
    "\"*\"",
    "\"-\"",
    "\"+\"",
    "\"=\"",
    "\"/\"",
    "\":\"",
    "\";\"",
    "\"?\"",
    "\"<\"",
    "\">\"",
    "\".\"",
    "\",\"",
    "\"\\\'\"",
    "\"\\\"\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"<=\"",
    "\">=\"",
    "\"==\"",
    "\"!=\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "<IDENTIFIER>",
    "<DIGIT>",
    "<LETTER>",
    "<CHAR>",
    "<STRING>",
    "<BOOL>",
    "<INT>",
    "<REAL>",
    "<SIGN>",
    "<UNSIGNED>",
    "<WHOLE>",
    "<FRACTION>",
    "<EXPONENT>",
  };

}
