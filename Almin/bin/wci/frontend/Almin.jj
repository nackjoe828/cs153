/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Almin.jj */
/*@egen*//* Team Aluminium (Yu-Chi Li, George McBay, Jianqi Wang, Naoko Nakatani)
 * Almin Compiler
 * Fall 2013
 */

options {
	DEBUG_PARSER = true;
    IGNORE_CASE=false;
                                               
                                                            
               
                 
}

PARSER_BEGIN(AlminParser)
package wci.frontend;

import java.util.ArrayList;
import java.io.*;

import wci.intermediate.*;
import wci.intermediate.symtabimpl.*;
import wci.backend.*;
import wci.util.*;

import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.symtabimpl.DefinitionImpl.*;
import static wci.intermediate.symtabimpl.RoutineCodeImpl.*;
import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.icodeimpl.ICodeKeyImpl.*;

import java.io.*;

public class AlminParser/*@bgen(jjtree)*/implements AlminParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTAlminParserState jjtree = new JJTAlminParserState();

/*@egen*/
  private static final String SOURCE_SUFFIX = ".al";
  private static final String OUTPUT_SUFFIX = ".j";

  private static SymTabStack symTabStack;
  private static SymTabEntry programId;
  
  public static void main(String[] args)
  {    
    // Create and initialize the symbol table stack.
    symTabStack = SymTabFactory.createSymTabStack();
    Predefined.initialize(symTabStack);
    
    // Check if the input format is valid 
    if (args.length != 1 || !args[0].endsWith(SOURCE_SUFFIX)) {
      System.out.println("Usage: > Almin inputfile.al");
      return;
    }

    String filePath = args[0];
    
    // Create parser from source
    FileReader fr = null;
    try {
      fr = new java.io.FileReader(filePath);
    } catch (FileNotFoundException e) {
      System.out.println("Error: \"" + filePath + "\" does not exist");    }

    // Get the file name without the ".al" suffix 
    String name = filePath.substring(0, filePath.lastIndexOf(SOURCE_SUFFIX));
    // Get the file name without Path and suffix (i.e. path/to/filename.al ===> filename)
	String programName = name.substring(name.lastIndexOf("/")+1);
    
    AlminParser parser = new AlminParser(fr);
    SimpleNode rootNode = null;
    
    try {
      rootNode = parser.Program(programName);
    } 
    catch (ParseException ex) {
      ex.printStackTrace();
    }
    
    // Print the cross-reference table.
    CrossReferencer crossReferencer = new CrossReferencer();
    crossReferencer.print(symTabStack);

    // Visit the parse tree nodes to decorate them with type information.
    TypeSetterVisitor typeVisitor = new TypeSetterVisitor();
    rootNode.jjtAccept(typeVisitor, null);

    // Create and initialize the ICode wrapper for the parse tree.
    ICode iCode = ICodeFactory.createICode();
    iCode.setRoot(rootNode);
    programId.setAttribute(ROUTINE_ICODE, iCode);
        
    // Print the parse tree.
    ParseTreePrinter treePrinter = new ParseTreePrinter(System.out);
    treePrinter.print(symTabStack); 
  } 
}    
PARSER_END(AlminParser)

SKIP : {
    < SPACE  : [" ", "\t"] >
  | < EOL    : ["\n", "\r"] > 
  | < SINGLE_LINE_COMMENT :   "//" (~["\n", "\r"])* (<EOL>)? >
  | < GENERAL_COMMENT : "/*" > : COMMENT_STATE
 }

<COMMENT_STATE> SKIP:
{
  <"*/"> : DEFAULT
 | < ~[] >
}

/* RESERVED WORDS */
TOKEN : {
    <MAIN        : "main">
  | <STATEMENT   : "STATEMENT">
  | <DECLARATION : "DECLARATION">
  | <IF          : "if">
  | <ELSE        : "else">
  | <WHILE       : "while">
  | <RETURN      : "return">                    
}

/* special symbol tokens */
TOKEN : {
    <STAR        : "*">
  | <MINUS       : "-">
  | <PLUS        : "+">  
  | <ASSIGN      : "="> 
  | <SLASH       : "/">
  | <COLON       : ":"> 
  | <SEMICOLON   : ";">
  | <HOOK        : "?">
  | <LT          : "<"> 
  | <GT          : ">"> 
  | <DOT         : ".">
  | <COMMA       : ",">
  | <SINGLEQUOTE : "'">
  | <DOUBLEQUOTE : "\"">
  | <LPAREN      : "(">
  | <RPAREN      : ")">
  | <LBRACE      : "{">
  | <RBRACE      : "}">   
  | <LE          : "<="> 
  | <GE          : ">=">  
  | <EQ          : "==">
  | <NE          : "!=">
  | <AND         : "&&">
  | <OR          : "||">
  | <NOT         : "!">
}

  
/* IDENTIFIER tokens */
TOKEN : {
   <IDENTIFIER : (<LETTER> | "_") (<LETTER> | <DIGIT> | "_")*>
  | <#DIGIT  : ["0"-"9"]>
  | <#LETTER : ["A"-"Z"] | ["a"-"z"]>
  
}

/* CHAR tokens */
TOKEN :
{
  <CHAR : <SINGLEQUOTE> (<LETTER>|<DIGIT>) <SINGLEQUOTE>>
}

/* STRING tokens */
TOKEN :
{
  <STRING :
    <DOUBLEQUOTE> 
    (
      (~["\"", "\\", "\n", "\r"]) |
      ( ("\\" ( ["n","t","b","r","f","\\","\'","\""] )))    )*
    <DOUBLEQUOTE>
  >
}

/* BOOL token*/
TOKEN :
{
  <BOOL : "true" | "false">}

/* Number value tokens */
TOKEN :
{
    <INT         : <UNSIGNED>>
  | <REAL        : <WHOLE><FRACTION><EXPONENT>
                 | <WHOLE><FRACTION>
                 | <WHOLE><EXPONENT>>

  | <#SIGN       : <PLUS>|<MINUS>>

  | <#UNSIGNED   : (<DIGIT>)+>
  | <#WHOLE      : <UNSIGNED>>
  | <#FRACTION   : <DOT><UNSIGNED>>
  | <#EXPONENT   : "E" (<SIGN>)? <UNSIGNED>>
}


/*****************************************
 * ALMIN GRAMMAR STARTS HERE             *
 *****************************************/
SimpleNode Program(String programName)       :
{
  // Set program name; Enter global scope (push on symTabStack)
  SimpleNode rootNode;
  programId = symTabStack.enterLocal(programName);
  programId.setDefinition(DefinitionImpl.PROGRAM);
  symTabStack.setProgramId(programId);
  programId.setAttribute(ROUTINE_SYMTAB, symTabStack.push());
  programId.setAttribute(ROUTINE_ROUTINES, new ArrayList<SymTabEntry>());
}
{
  rootNode = FunctionDefinitions()
  <EOF>
  {
    symTabStack.pop();
    return rootNode;
  }
}

SimpleNode FunctionDefinitions()       :
{
  SimpleNode rootNode;
}
{
  (FuncDefn())*
  rootNode = ProgramMain()
  { return rootNode; }
}

SimpleNode ProgramMain()       :
{
  SimpleNode rootNode;
}
{
  <MAIN> // push new scope for main()
  {
    SymTabEntry mainID = symTabStack.enterLocal("main");
    mainID.setDefinition(DefinitionImpl.PROCEDURE);
	mainID.appendLineNumber(token.beginLine);
    mainID.setAttribute(ROUTINE_SYMTAB, symTabStack.push());
  }
  rootNode = Block()
  {
    ICode iCode = ICodeFactory.createICode();
    iCode.setRoot(rootNode);
    mainID.setAttribute(ROUTINE_ICODE, iCode);
    symTabStack.pop();
    return rootNode;
  }}

void FuncDefn()        :
{
  TypeSpec type;
  SymTabEntry funcID;
  ArrayList<SymTabEntry> paramList;
  SimpleNode bodyNode;
}
{
   // Return Type
  <IDENTIFIER> { type = javaCodeGetAndProcessTypeID(token); }
  // Function name
  <IDENTIFIER> { funcID = javaCodeProcessFuncDefn(token, type); }
  
  "(" // Parameters  {
    funcID.setAttribute(ROUTINE_SYMTAB, symTabStack.push());
    ArrayList<SymTabEntry> routineIds =
    	(ArrayList<SymTabEntry>) programId.getAttribute(ROUTINE_ROUTINES);
    routineIds.add(funcID);
    paramList = new ArrayList<SymTabEntry>();  }
       [<IDENTIFIER> { type = javaCodeGetAndProcessTypeID(token); }
        <IDENTIFIER> { paramList.add(javaCodeProcessVariableDeclaration(token, type)); }
       ("," <IDENTIFIER> { type = javaCodeGetAndProcessTypeID(token); }
            <IDENTIFIER> { paramList.add(javaCodeProcessVariableDeclaration(token, type));})*
      ]
  ")"
  { funcID.setAttribute(ROUTINE_PARMS, paramList); }
  bodyNode = Block()
  {
    ICode iCode = ICodeFactory.createICode();
    iCode.setRoot(bodyNode);
    funcID.setAttribute(ROUTINE_ICODE, iCode);
    symTabStack.pop();
  }
}

SimpleNode Block() :
{/*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ SimpleNode rootNode; }
{/*@bgen(jjtree) Block */
  try {
/*@egen*/
  "{"
      [<DECLARATION > ":" (VariableDeclaration())*
      <STATEMENT> ":"]
      rootNode = Statements()
  "}"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return rootNode ;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void VariableDeclaration()        :
{ TypeSpec type; }
{
  <IDENTIFIER> { type = javaCodeGetAndProcessTypeID(token); }
  <IDENTIFIER> { javaCodeProcessVariableDeclaration(token, type); }
  ";"
}

SimpleNode Statements() : {/*@bgen(jjtree) Statements */
  ASTStatements jjtn000 = new ASTStatements(JJTSTATEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Statements */
  try {
/*@egen*/
  (Statement())*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Statement()       : {}
{
  LOOKAHEAD(2) // AssignmentStatement and FunctionCall both start with <IDENTIFIER>  
  AssignmentStatement() | FunctionCall() ";" | Block() | ControlStatement() |  ReturnStatement()
}

void AssignmentStatement() : {/*@bgen(jjtree) AssignmentStatement */
  ASTAssignmentStatement jjtn000 = new ASTAssignmentStatement(JJTASSIGNMENTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AssignmentStatement */
  try {
/*@egen*/
  Variable() "=" Expression() ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void ControlStatement()       : {}
{
  IfStatement() | WhileStatement()
}

void IfStatement() : {/*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) IfStatement */
  try {
/*@egen*/
  <IF> "(" Expression() ")" Statement()
  // nothing wrong - suppress warning by adding LOOKAHEAD(1)
  [LOOKAHEAD(1) <ELSE> Statement()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void WhileStatement() : {/*@bgen(jjtree) WhileStatement */
  ASTWhileStatement jjtn000 = new ASTWhileStatement(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhileStatement */
  try {
/*@egen*/
  <WHILE> "(" Expression() ")" Statement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/     }

void FunctionCall() : {/*@bgen(jjtree) FunctionCall */
  ASTFunctionCall jjtn000 = new ASTFunctionCall(JJTFUNCTIONCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionCall */
  try {
/*@egen*/
  <IDENTIFIER> {
    SymTabEntry funcID = symTabStack.lookup(token.image);
  	funcID.appendLineNumber(token.beginLine);
    TypeSpec type = funcID.getTypeSpec();
    jjtn000.setTypeSpec(type);
    jjtn000.setAttribute(ID, funcID);
  }
   "(" [Expression() ("," Expression())*] ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void ReturnStatement() : {/*@bgen(jjtree) ReturnStatement */
  ASTReturnStatement jjtn000 = new ASTReturnStatement(JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ReturnStatement */
  try {
/*@egen*/
  <RETURN> [ Expression() ] ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Expression()       : {}
{
  StringLiteral() |
  SimpleExpression()   [ <LT>/*@bgen(jjtree) #LT( 2) */
                              {
                                ASTLT jjtn001 = new ASTLT(JJTLT);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                              }
                              try {
/*@egen*/ SimpleExpression()/*@bgen(jjtree)*/
                              } catch (Throwable jjte001) {
                                if (jjtc001) {
                                  jjtree.clearNodeScope(jjtn001);
                                  jjtc001 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte001 instanceof RuntimeException) {
                                  throw (RuntimeException)jjte001;
                                }
                                if (jjte001 instanceof ParseException) {
                                  throw (ParseException)jjte001;
                                }
                                throw (Error)jjte001;
                              } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  2);
                                }
                              }
/*@egen*/       
                       | <LE>/*@bgen(jjtree) #LE( 2) */
                              {
                                ASTLE jjtn002 = new ASTLE(JJTLE);
                                boolean jjtc002 = true;
                                jjtree.openNodeScope(jjtn002);
                              }
                              try {
/*@egen*/ SimpleExpression()/*@bgen(jjtree)*/
                              } catch (Throwable jjte002) {
                                if (jjtc002) {
                                  jjtree.clearNodeScope(jjtn002);
                                  jjtc002 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte002 instanceof RuntimeException) {
                                  throw (RuntimeException)jjte002;
                                }
                                if (jjte002 instanceof ParseException) {
                                  throw (ParseException)jjte002;
                                }
                                throw (Error)jjte002;
                              } finally {
                                if (jjtc002) {
                                  jjtree.closeNodeScope(jjtn002,  2);
                                }
                              }
/*@egen*/       
                       | <GT>/*@bgen(jjtree) #GT( 2) */
                              {
                                ASTGT jjtn003 = new ASTGT(JJTGT);
                                boolean jjtc003 = true;
                                jjtree.openNodeScope(jjtn003);
                              }
                              try {
/*@egen*/ SimpleExpression()/*@bgen(jjtree)*/
                              } catch (Throwable jjte003) {
                                if (jjtc003) {
                                  jjtree.clearNodeScope(jjtn003);
                                  jjtc003 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte003 instanceof RuntimeException) {
                                  throw (RuntimeException)jjte003;
                                }
                                if (jjte003 instanceof ParseException) {
                                  throw (ParseException)jjte003;
                                }
                                throw (Error)jjte003;
                              } finally {
                                if (jjtc003) {
                                  jjtree.closeNodeScope(jjtn003,  2);
                                }
                              }
/*@egen*/       
                       | <GE>/*@bgen(jjtree) #GE( 2) */
                              {
                                ASTGE jjtn004 = new ASTGE(JJTGE);
                                boolean jjtc004 = true;
                                jjtree.openNodeScope(jjtn004);
                              }
                              try {
/*@egen*/ SimpleExpression()/*@bgen(jjtree)*/
                              } catch (Throwable jjte004) {
                                if (jjtc004) {
                                  jjtree.clearNodeScope(jjtn004);
                                  jjtc004 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte004 instanceof RuntimeException) {
                                  throw (RuntimeException)jjte004;
                                }
                                if (jjte004 instanceof ParseException) {
                                  throw (ParseException)jjte004;
                                }
                                throw (Error)jjte004;
                              } finally {
                                if (jjtc004) {
                                  jjtree.closeNodeScope(jjtn004,  2);
                                }
                              }
/*@egen*/       
                       | <EQ>/*@bgen(jjtree) #EQ( 2) */
                              {
                                ASTEQ jjtn005 = new ASTEQ(JJTEQ);
                                boolean jjtc005 = true;
                                jjtree.openNodeScope(jjtn005);
                              }
                              try {
/*@egen*/ SimpleExpression()/*@bgen(jjtree)*/
                              } catch (Throwable jjte005) {
                                if (jjtc005) {
                                  jjtree.clearNodeScope(jjtn005);
                                  jjtc005 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte005 instanceof RuntimeException) {
                                  throw (RuntimeException)jjte005;
                                }
                                if (jjte005 instanceof ParseException) {
                                  throw (ParseException)jjte005;
                                }
                                throw (Error)jjte005;
                              } finally {
                                if (jjtc005) {
                                  jjtree.closeNodeScope(jjtn005,  2);
                                }
                              }
/*@egen*/       
                       | <NE>/*@bgen(jjtree) #NE( 2) */
                              {
                                ASTNE jjtn006 = new ASTNE(JJTNE);
                                boolean jjtc006 = true;
                                jjtree.openNodeScope(jjtn006);
                              }
                              try {
/*@egen*/ SimpleExpression()/*@bgen(jjtree)*/
                              } catch (Throwable jjte006) {
                                if (jjtc006) {
                                  jjtree.clearNodeScope(jjtn006);
                                  jjtc006 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte006 instanceof RuntimeException) {
                                  throw (RuntimeException)jjte006;
                                }
                                if (jjte006 instanceof ParseException) {
                                  throw (ParseException)jjte006;
                                }
                                throw (Error)jjte006;
                              } finally {
                                if (jjtc006) {
                                  jjtree.closeNodeScope(jjtn006,  2);
                                }
                              }
/*@egen*/       
                       ]
}

void SimpleExpression()       : {}
{
  Term() ( "+"/*@bgen(jjtree) #add( 2) */
                {
                  ASTadd jjtn001 = new ASTadd(JJTADD);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/  Term()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
                }
/*@egen*/        
         | "-"/*@bgen(jjtree) #sub( 2) */
                {
                  ASTsub jjtn002 = new ASTsub(JJTSUB);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*/  Term()/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  2);
                  }
                }
/*@egen*/        
         | <OR>/*@bgen(jjtree) #or( 2) */
                {
                  ASTor jjtn003 = new ASTor(JJTOR);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
                }
                try {
/*@egen*/ Term()/*@bgen(jjtree)*/
                } catch (Throwable jjte003) {
                  if (jjtc003) {
                    jjtree.clearNodeScope(jjtn003);
                    jjtc003 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte003 instanceof RuntimeException) {
                    throw (RuntimeException)jjte003;
                  }
                  if (jjte003 instanceof ParseException) {
                    throw (ParseException)jjte003;
                  }
                  throw (Error)jjte003;
                } finally {
                  if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003,  2);
                  }
                }
/*@egen*/       
         )*
}

void Term()       : {}
{
  Factor() ( "*"/*@bgen(jjtree) #mult( 2) */
                   {
                     ASTmult jjtn001 = new ASTmult(JJTMULT);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                   }
                   try {
/*@egen*/   Factor()/*@bgen(jjtree)*/
                   } catch (Throwable jjte001) {
                     if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       throw (RuntimeException)jjte001;
                     }
                     if (jjte001 instanceof ParseException) {
                       throw (ParseException)jjte001;
                     }
                     throw (Error)jjte001;
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  2);
                     }
                   }
/*@egen*/         
           | "/"/*@bgen(jjtree) #div( 2) */
                   {
                     ASTdiv jjtn002 = new ASTdiv(JJTDIV);
                     boolean jjtc002 = true;
                     jjtree.openNodeScope(jjtn002);
                   }
                   try {
/*@egen*/   Factor()/*@bgen(jjtree)*/
                   } catch (Throwable jjte002) {
                     if (jjtc002) {
                       jjtree.clearNodeScope(jjtn002);
                       jjtc002 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte002 instanceof RuntimeException) {
                       throw (RuntimeException)jjte002;
                     }
                     if (jjte002 instanceof ParseException) {
                       throw (ParseException)jjte002;
                     }
                     throw (Error)jjte002;
                   } finally {
                     if (jjtc002) {
                       jjtree.closeNodeScope(jjtn002,  2);
                     }
                   }
/*@egen*/        
           | <AND>/*@bgen(jjtree) #and( 2) */
                   {
                     ASTand jjtn003 = new ASTand(JJTAND);
                     boolean jjtc003 = true;
                     jjtree.openNodeScope(jjtn003);
                   }
                   try {
/*@egen*/ Factor()/*@bgen(jjtree)*/
                   } catch (Throwable jjte003) {
                     if (jjtc003) {
                       jjtree.clearNodeScope(jjtn003);
                       jjtc003 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte003 instanceof RuntimeException) {
                       throw (RuntimeException)jjte003;
                     }
                     if (jjte003 instanceof ParseException) {
                       throw (ParseException)jjte003;
                     }
                     throw (Error)jjte003;
                   } finally {
                     if (jjtc003) {
                       jjtree.closeNodeScope(jjtn003,  2);
                     }
                   }
/*@egen*/        
           )*
}

void Factor()       : {}
{
  LOOKAHEAD(2) // Variable and FunctionCall both start with <IDENTIFIER>
  FunctionCall() | Variable() | Literal() | "(" Expression() ")" | <NOT> Factor() | "-" Factor()
}

void StringLiteral() : {/*@bgen(jjtree) StringLiteral */
  ASTStringLiteral jjtn000 = new ASTStringLiteral(JJTSTRINGLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) StringLiteral */
  try {
/*@egen*/
  <STRING>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {
        jjtn000.setTypeSpec(Predefined.stringType);
        jjtn000.setAttribute(VALUE, token.image.substring(1, token.image.length()-1));  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void Literal() : {/*@bgen(jjtree) Literal */
  ASTLiteral jjtn000 = new ASTLiteral(JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Literal */
  try {
/*@egen*/
  <INT>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ {
        jjtn000.setTypeSpec(Predefined.integerType);
        jjtn000.setAttribute(VALUE, Integer.parseInt(token.image)); 
  } |
  <REAL>/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/ {
        jjtn000.setTypeSpec(Predefined.realType);
        jjtn000.setAttribute(VALUE, Double.parseDouble(token.image)); 
  } |
  <CHAR>/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/ {
        jjtn000.setTypeSpec(Predefined.charType);
        jjtn000.setAttribute(VALUE, token.image.charAt(1)); 
  } |
  <BOOL>/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/ {
        jjtn000.setTypeSpec(Predefined.booleanType);
        jjtn000.setAttribute(VALUE, Boolean.valueOf(token.image)); 
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Variable() : {/*@bgen(jjtree) Variable */
  ASTVariable jjtn000 = new ASTVariable(JJTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Variable */
  try {
/*@egen*/
  <IDENTIFIER>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {
    SymTabEntry variableId = symTabStack.lookup(token.image);
  	variableId.appendLineNumber(token.beginLine);
    TypeSpec type = variableId.getTypeSpec();
    jjtn000.setTypeSpec(type);
    jjtn000.setAttribute(ID, variableId);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

JAVACODE
TypeSpec javaCodeGetAndProcessTypeID(Token t)      
{
    SymTabEntry typeID = symTabStack.lookup(t.image);
    typeID.appendLineNumber(t.beginLine);
    return typeID.getTypeSpec(); 
}

JAVACODE
SymTabEntry javaCodeProcessFuncDefn(Token t, TypeSpec type)      
{    SymTabEntry funcID = symTabStack.enterLocal(t.image);
    funcID.setDefinition(DefinitionImpl.FUNCTION);
    funcID.appendLineNumber(t.beginLine);
    funcID.setTypeSpec(type); // set return type
    return funcID;
}

JAVACODE
SymTabEntry javaCodeProcessVariableDeclaration(Token t, TypeSpec type)      
{
    SymTabEntry varID = symTabStack.enterLocal(t.image);
    varID.setDefinition(DefinitionImpl.VARIABLE);
    varID.appendLineNumber(t.beginLine);
    varID.setTypeSpec(type); // set return type
    return varID;
}